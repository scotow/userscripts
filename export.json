{
   "created_by":"Tampermonkey",
   "version":"1",
   "scripts":[
      {
         "name":"BetterTTV",
         "options":{
            "check_for_updates":true,
            "comment":null,
            "compatopts_for_requires":true,
            "compat_wrappedjsobject":false,
            "compat_metadata":false,
            "compat_foreach":false,
            "compat_arrayleft":false,
            "compat_uW_gmonkey":false,
            "compat_forvarin":false,
            "noframes":null,
            "awareOfChrome":false,
            "run_at":null,
            "override":{
               "use_includes":[
                  
               ],
               "orig_includes":[
                  "*://*.twitch.tv/*"
               ],
               "merge_includes":true,
               "use_matches":[
                  
               ],
               "orig_matches":[
                  
               ],
               "merge_matches":true,
               "use_excludes":[
                  
               ],
               "orig_excludes":[
                  
               ],
               "merge_excludes":true,
               "use_connects":[
                  
               ],
               "merge_connects":true,
               "use_blockers":[
                  
               ],
               "orig_run_at":"document-idle",
               "orig_noframes":null
            }
         },
         "storage":{
            "data":{
               
            },
            "ts":1605310000808
         },
         "enabled":true,
         "position":1,
         "file_url":"https://www.nightdev.com/betterttv/other/betterttv.user.js",
         "uuid":"ace49216-eb01-42f8-a28e-8bf9de2e0320",
         "source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgICBCZXR0ZXJUVFYKLy8gQG5hbWVzcGFjZSAgICAgICBCVFRWCi8vIEBkZXNjcmlwdGlvbiAgICAgRW5oYW5jZXMgVHdpdGNoIHdpdGggbmV3IGZlYXR1cmVzLCBlbW90ZXMsIGFuZCBtb3JlLgovLyBAY29weXJpZ2h0ICAgICAgIE5pZ2h0RGV2LCBMTEMKLy8gQGljb24gICAgICAgICAgICBodHRwczovL2Nkbi5iZXR0ZXJ0dHYubmV0L2Fzc2V0cy9sb2dvcy9idHR2X2xvZ28ucG5nCi8vCi8vIEBncmFudCAgICAgICAgICAgbm9uZQovLwovLyBAaW5jbHVkZSAgICAgICAgICo6Ly8qLnR3aXRjaC50di8qCi8vCi8vIEB2ZXJzaW9uICAgICAgICAgMC4wLjIKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24gYmV0dGVydHR2KCkgewogICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogICAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JzsKICAgIHNjcmlwdC5zcmMgPSAnaHR0cHM6Ly9jZG4uYmV0dGVydHR2Lm5ldC9iZXR0ZXJ0dHYuanMnOwogICAgdmFyIGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdOwogICAgaWYgKCFoZWFkKSByZXR1cm47CiAgICBoZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7Cn0pKCkK"
      },
      {
         "name":"Reddit /r/all as home",
         "options":{
            "check_for_updates":true,
            "comment":null,
            "compatopts_for_requires":true,
            "compat_wrappedjsobject":false,
            "compat_metadata":false,
            "compat_foreach":false,
            "compat_arrayleft":false,
            "compat_uW_gmonkey":false,
            "compat_forvarin":false,
            "noframes":null,
            "awareOfChrome":false,
            "run_at":null,
            "override":{
               "use_includes":[
                  
               ],
               "orig_includes":[
                  
               ],
               "merge_includes":true,
               "use_matches":[
                  
               ],
               "orig_matches":[
                  "https://www.reddit.com/*"
               ],
               "merge_matches":true,
               "use_excludes":[
                  
               ],
               "orig_excludes":[
                  
               ],
               "merge_excludes":true,
               "use_connects":[
                  
               ],
               "merge_connects":true,
               "use_blockers":[
                  
               ],
               "orig_run_at":"document-idle",
               "orig_noframes":null
            }
         },
         "storage":{
            "data":{
               
            },
            "ts":1605310000810
         },
         "enabled":true,
         "position":2,
         "uuid":"f888868c-6be7-426f-994e-6d7bf49f8f89",
         "source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBSZWRkaXQgL3IvYWxsIGFzIGhvbWUKLy8gQG5hbWVzcGFjZSAgICBodHRwOi8vdGFtcGVybW9ua2V5Lm5ldC8KLy8gQHZlcnNpb24gICAgICAwLjEKLy8gQGRlc2NyaXB0aW9uICBUaGUgcmVkZGl0IGljb24gcmVkaXJlY3QgdG8gL3IvYWxsIGluc3RlYWQuCi8vIEBhdXRob3IgICAgICAgU2NvdG93Ci8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly93d3cucmVkZGl0LmNvbS8qCi8vIEBpY29uICAgICAgICAgaHR0cHM6Ly93d3cucmVkZGl0c3RhdGljLmNvbS9kZXNrdG9wMngvaW1nL2Zhdmljb24vZmF2aWNvbi05Nng5Ni5wbmcKLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uKCkgewogICAgdmFyIG9sZEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkZXIgYScpOwogICAgdmFyIG5ld0VsZW1lbnQgPSBvbGRFbGVtZW50LmNsb25lTm9kZSh0cnVlKTsKICAgIG5ld0VsZW1lbnQuaHJlZiA9ICcvci9hbGwnOwogICAgb2xkRWxlbWVudC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuZXdFbGVtZW50LCBvbGRFbGVtZW50KTsKfSkoKTs="
      },
      {
         "name":"Disable spell check for TypeRacer",
         "options":{
            "check_for_updates":true,
            "comment":null,
            "compatopts_for_requires":true,
            "compat_wrappedjsobject":false,
            "compat_metadata":false,
            "compat_foreach":false,
            "compat_arrayleft":false,
            "compat_uW_gmonkey":false,
            "compat_forvarin":false,
            "noframes":null,
            "awareOfChrome":false,
            "run_at":null,
            "override":{
               "use_includes":[
                  
               ],
               "orig_includes":[
                  
               ],
               "merge_includes":true,
               "use_matches":[
                  
               ],
               "orig_matches":[
                  "https://play.typeracer.com/*"
               ],
               "merge_matches":true,
               "use_excludes":[
                  
               ],
               "orig_excludes":[
                  
               ],
               "merge_excludes":true,
               "use_connects":[
                  
               ],
               "merge_connects":true,
               "use_blockers":[
                  
               ],
               "orig_run_at":"document-idle",
               "orig_noframes":null
            }
         },
         "storage":{
            "data":{
               
            },
            "ts":1605310000812
         },
         "enabled":true,
         "position":3,
         "uuid":"4e6f1824-c196-4a37-86e8-c41b5f9ebb41",
         "source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBEaXNhYmxlIHNwZWxsIGNoZWNrIGZvciBUeXBlUmFjZXIKLy8gQG5hbWVzcGFjZSAgICBodHRwOi8vdGFtcGVybW9ua2V5Lm5ldC8KLy8gQHZlcnNpb24gICAgICAwLjEKLy8gQGRlc2NyaXB0aW9uICBEaXNhYmxlIGF1dG8gY29ycmVjdCBvbiBUeXBlUmFjZXIuY29tCi8vIEBhdXRob3IgICAgICAgWW91Ci8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9wbGF5LnR5cGVyYWNlci5jb20vKgovLyBAaWNvbiAgICAgICAgIGh0dHBzOi8vcGxheS50eXBlcmFjZXIuY29tL2Zhdmljb24uaWNvCi8vIEBncmFudCAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KCihmdW5jdGlvbigpIHsKICAgIHNldEludGVydmFsKGZ1bmN0aW9uKCkgewogICAgICAgIGNvbnN0IGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd0eHRJbnB1dCcpWzBdOwogICAgICAgIGlmIChlbGVtKSB7CiAgICAgICAgICAgIGVsZW0uc2V0QXR0cmlidXRlKCJzcGVsbGNoZWNrIiwgImZhbHNlIik7CiAgICAgICAgfQogICAgfSwgMTAwMCk7Cn0pKCk7"
      },
      {
         "name":"Open in IINA from Plex",
         "options":{
            "check_for_updates":true,
            "comment":null,
            "compatopts_for_requires":true,
            "compat_wrappedjsobject":false,
            "compat_metadata":false,
            "compat_foreach":false,
            "compat_arrayleft":false,
            "compat_uW_gmonkey":false,
            "compat_forvarin":false,
            "noframes":null,
            "awareOfChrome":false,
            "run_at":null,
            "override":{
               "use_includes":[
                  
               ],
               "orig_includes":[
                  
               ],
               "merge_includes":true,
               "use_matches":[
                  
               ],
               "orig_matches":[
                  "https://app.plex.tv/desktop/*"
               ],
               "merge_matches":true,
               "use_excludes":[
                  
               ],
               "orig_excludes":[
                  
               ],
               "merge_excludes":true,
               "use_connects":[
                  
               ],
               "merge_connects":true,
               "use_blockers":[
                  
               ],
               "orig_run_at":"document-idle",
               "orig_noframes":null,
               "orig_connects":[
                  
               ]
            }
         },
         "storage":{
            "data":{
               
            },
            "ts":1605310000809
         },
         "enabled":true,
         "position":4,
         "uuid":"39b77248-759e-4c28-aca9-21a061f5ed49",
         "source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBPcGVuIGluIElJTkEgZnJvbSBQbGV4Ci8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgUmVwbGFjZSBkb3dubG9hZCBieSBPcGVuIGluIElJTkEKLy8gQGF1dGhvciAgICAgICBTY290b3cKLy8gQG1hdGNoICAgICAgICBodHRwczovL2FwcC5wbGV4LnR2L2Rlc2t0b3AvKgovLyBAaWNvbiAgICAgICAgIGh0dHBzOi8vYXNzZXRzLnBsZXgudHYvZGVwbG95cy9kZXNrdG9wL2Vudi1lYjI3OThjYzNjN2Q5NTMzZGY1YjU2Mzk2M2Q1YzM5NC80LjAuMS1lY2U3MDY0L2Zhdmljb24uaWNvCi8vIEBncmFudCAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KCihmdW5jdGlvbigpIHsKICAgIGZ1bmN0aW9uIGlzTWVudShub2RlKSB7CiAgICAgICAgZm9yKGxldCBjIG9mIG5vZGUuY2xhc3NMaXN0KSB7CiAgICAgICAgICAgIGlmKGMuaW5jbHVkZXMoJ01lbnUtbWVudVBvcnRhbCcpKSByZXR1cm4gdHJ1ZQogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2UKICAgIH0KCiAgICBmdW5jdGlvbiBpbnNlcnRBZnRlcihub2RlLCB0YXJnZXQpIHsKICAgICAgICB0YXJnZXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgdGFyZ2V0Lm5leHRTaWJsaW5nKQogICAgfQoKICAgIGZ1bmN0aW9uIG9uTXV0YXRlKG11dGF0aW9uc0xpc3QsIG9ic2VydmVyKSB7CiAgICAgICAgZm9yKGxldCBtdXRhdGlvbiBvZiBtdXRhdGlvbnNMaXN0KSB7CiAgICAgICAgICAgIGZvcihsZXQgYWRkZWROb2RlIG9mIG11dGF0aW9uLmFkZGVkTm9kZXMpIHsKICAgICAgICAgICAgICAgIGlmKCFpc01lbnUoYWRkZWROb2RlKSkgY29udGludWUKICAgICAgICAgICAgICAgIGNvbnN0IG1lbnVOb2RlID0gYWRkZWROb2RlCgogICAgICAgICAgICAgICAgY29uc3QgZG93bmxvYWROb2RlID0gbWVudU5vZGUucXVlcnlTZWxlY3RvcignYVtkb3dubG9hZF0sIGFbdGFyZ2V0PWRvd25sb2FkRmlsZUZyYW1lXScpCiAgICAgICAgICAgICAgICBpZighZG93bmxvYWROb2RlKSBjb250aW51ZQoKICAgICAgICAgICAgICAgIGNvbnN0IGlpbmFOb2RlID0gZG93bmxvYWROb2RlLmNsb25lTm9kZSgpCiAgICAgICAgICAgICAgICBpaW5hTm9kZS50ZXh0Q29udGVudCA9ICdPcGVuIGluIElJTkEnCiAgICAgICAgICAgICAgICBpaW5hTm9kZS5ocmVmID0gYGlpbmE6Ly93ZWJsaW5rP3VybD0ke2VuY29kZVVSSUNvbXBvbmVudChkb3dubG9hZE5vZGUuaHJlZil9YAogICAgICAgICAgICAgICAgaW5zZXJ0QWZ0ZXIoaWluYU5vZGUsIGRvd25sb2FkTm9kZSkKCiAgICAgICAgICAgICAgICBjb25zdCBpaW5hUGlwTm9kZSA9IGRvd25sb2FkTm9kZS5jbG9uZU5vZGUoKQogICAgICAgICAgICAgICAgaWluYVBpcE5vZGUudGV4dENvbnRlbnQgPSBgJHtpaW5hTm9kZS50ZXh0Q29udGVudH0gKFBpUClgCiAgICAgICAgICAgICAgICBpaW5hUGlwTm9kZS5ocmVmID0gYCR7aWluYU5vZGUuaHJlZn0mcGlwPTFgCiAgICAgICAgICAgICAgICBpbnNlcnRBZnRlcihpaW5hUGlwTm9kZSwgaWluYU5vZGUpCgogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihvbk11dGF0ZSkKICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuYm9keSwgeyBjaGlsZExpc3Q6IHRydWUgfSkKfSkoKQ=="
      },
      {
         "name":"Disable Reddit click on boxes",
         "options":{
            "check_for_updates":true,
            "comment":null,
            "compatopts_for_requires":true,
            "compat_wrappedjsobject":false,
            "compat_metadata":false,
            "compat_foreach":false,
            "compat_arrayleft":false,
            "compat_uW_gmonkey":false,
            "compat_forvarin":false,
            "noframes":null,
            "awareOfChrome":false,
            "run_at":null,
            "override":{
               "use_includes":[
                  
               ],
               "orig_includes":[
                  
               ],
               "merge_includes":true,
               "use_matches":[
                  
               ],
               "orig_matches":[
                  "https://www.reddit.com/*"
               ],
               "merge_matches":true,
               "use_excludes":[
                  
               ],
               "orig_excludes":[
                  
               ],
               "merge_excludes":true,
               "use_connects":[
                  
               ],
               "merge_connects":true,
               "use_blockers":[
                  
               ],
               "orig_run_at":"document-idle",
               "orig_noframes":null
            }
         },
         "storage":{
            "data":{
               
            },
            "ts":1605310000808
         },
         "enabled":false,
         "position":5,
         "uuid":"3b494357-41f5-4b9d-8a13-70c3e155a6de",
         "source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBEaXNhYmxlIFJlZGRpdCBjbGljayBvbiBib3hlcwovLyBAdmVyc2lvbiAgICAgIDAuMQovLyBAYXV0aG9yICAgICAgIFNjb3RvdwovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8vd3d3LnJlZGRpdC5jb20vKgovLyBAaWNvbiAgICAgICAgIGh0dHBzOi8vd3d3LnJlZGRpdHN0YXRpYy5jb20vZGVza3RvcDJ4L2ltZy9mYXZpY29uL2Zhdmljb24tOTZ4OTYucG5nCi8vIEBncmFudCAgICAgICAgR01fYWRkU3R5bGUKLy8gPT0vVXNlclNjcmlwdD09CgpHTV9hZGRTdHlsZShgCi5iRTdKZ00yZXg3VzNhRjN6Y2k1Ym0gewogIHBvaW50ZXItZXZlbnRzOiBub25lOwp9CgouXzIzaDAtRWNhQlVvcklIQy1KWnloNkosIC55OEhZSi15X2xUVUhrUUljMW1kQ3EsIC5fMTNzdmhRSVVacUQ5UFZ6RmNMd09LVCwgLl8ybUh1dXZ5Vjlkb1YzendiWlB0SVBHLCAuUnZMdEFjZFJ0Yk9RYmhGQjdNRF9ULCAuXzMtbWlBRW9qckN2eF80RlE4eDNQLXMsIC5fM09hMFRIbVozZjVpWlhBUTBoQkowaywgLm0zYU5DNnlwOFJyTk1fLWEwcnJmYSB7CiAgcG9pbnRlci1ldmVudHM6IGFsbDsKfQoKYCk7"
      },
      {
         "name":"Skribbl.io Helper",
         "options":{
            "check_for_updates":true,
            "comment":null,
            "compatopts_for_requires":true,
            "compat_wrappedjsobject":false,
            "compat_metadata":false,
            "compat_foreach":false,
            "compat_arrayleft":false,
            "compat_uW_gmonkey":false,
            "compat_forvarin":false,
            "noframes":null,
            "awareOfChrome":false,
            "run_at":null,
            "override":{
               "use_includes":[
                  
               ],
               "orig_includes":[
                  
               ],
               "merge_includes":true,
               "use_matches":[
                  
               ],
               "orig_matches":[
                  "https://skribbl.io/*"
               ],
               "merge_matches":true,
               "use_excludes":[
                  
               ],
               "orig_excludes":[
                  
               ],
               "merge_excludes":true,
               "use_connects":[
                  
               ],
               "merge_connects":true,
               "use_blockers":[
                  
               ],
               "orig_run_at":"document-idle",
               "orig_noframes":null
            }
         },
         "storage":{
            "data":{
               
            },
            "ts":1605310000810
         },
         "enabled":false,
         "position":6,
         "file_url":"https://greasyfork.org/scripts/374584-skribbl-io-helper/code/Skribblio%20Helper.user.js",
         "uuid":"7b3e1bd2-5a63-476e-88c1-7a92d65d8fa7",
         "source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBTa3JpYmJsLmlvIEhlbHBlcgovLyBAdmVyc2lvbiAgICAgIDAuMjQKLy8gQGRlc2NyaXB0aW9uICBMZWFybnMgdGhlIHdvcmRsaXN0IGVhY2ggcm91bmQgYW5kIG91dHB1dHMgcG9zc2libGUgd29yZHMgaW4gY2hhdC4KLy8gQGF1dGhvciAgICAgICBuMHRoaW5nCi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9za3JpYmJsLmlvLyoKLy8gQGdyYW50ICAgICAgICBub25lCi8vIEBuYW1lc3BhY2UgaHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy91c2Vycy85MDc3MAovLyA9PS9Vc2VyU2NyaXB0PT0KCihmdW5jdGlvbigpIHsKICAgICd1c2Ugc3RyaWN0JzsKCmlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnd29yZGxpc3QnKSAhPT0gbnVsbCkgewogIHdpbmRvdy5hbGVydCgnSGVsbG8gZnJvbSBuMHRoaW5nISBJIGFtIHRoZSBkZXZlbG9wZXIgb2YgU2tyaWJibC5pbyBIZWxwZXIsIGFuZCBJXCd2ZSBqdXN0IHVwZGF0ZWQgdGhlIHNjcmlwdCBmcm9tIDAuMTIgdG8gMC4yMC5cblRoaXMgbmV3IHVwZGF0ZSBhbGxvd3MgZm9yIG11bHRpLWxhbmd1YWdlIHN1cHBvcnQsIGJ1dCB5b3VyIGN1cnJlbnQgV09SRExJU1Qgd2lsbCBiZSBhZmZlY3RlZCFcblBsZWFzZSB0cmFuc2ZlciB5b3VyIGN1cnJlbnQgd29yZGxpc3QgdG8gd29yZGxpc3RbTGFuZ10gc28gU2tyaWJibC5pbyBoZWxwZXIgY2FuIHVzZSB5b3VyIGN1cnJlbnQgd29yZGxpc3QuXG5TZWUgdGhpcyB0aGlzIGZvcnVtIChncmVhc3lmb3JrLm9yZy9lbi9mb3J1bS9kaXNjdXNzaW9uLzQ4ODY1LykgZm9yIG1vcmUgaW5mb3JtYXRpb24gYW5kIGhvdyB0byB0cmFuc2ZlciFcblxuIFRoaXMgcG9wdXAgd2lsbCBzdG9wIGFwcGVhcmluZyBvbmNlIHRoZSB0cmFuc2ZlciBpcyBjb21wbGV0ZS4nKTsKfQoKLy9jcmVhdGUgd29yZGxpc3QgbmFtZSwgY2hlY2sgaWYgd29yZGxpc3QgbG9jYWxzdG9yYWdlIGV4aXN0cyB1cG9uIGpvaW5pbmcgZ2FtZQp2YXIgd29yZGxpc3Q7IC8vZGVjbGFyZSBnbG9iYWwgc2NvcGUgd29yZGxpc3QgdmFyCmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmb3JtTG9naW4gPiBidXR0b24nKS5vbmNsaWNrID0gZnVuY3Rpb24oKXsKd29yZGxpc3QgPSAnd29yZGxpc3QnICsgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xvZ2luTGFuZ3VhZ2UnKS52YWx1ZTsKaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHdvcmRsaXN0KSA9PT0gbnVsbCkgewpsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh3b3JkbGlzdCwnIiInKTsKfQp9OwoKdmFyIHdvcmRoaW50Owp2YXIgd29yZFJHWDsKdmFyIGk7CgovL2NyZWF0ZSBtZXNzYWdlIGVsZW1lbnQKdmFyIG1lc3NhZ2VlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpOwptZXNzYWdlZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ2Rpc3BsYXk6IG5vbmUnKTsKbWVzc2FnZWVsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsJ2JvdENoYXQnKTsKdmFyIGMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7CmMuc2V0QXR0cmlidXRlKCdpZCcsJ2hpbnQnKTsKbWVzc2FnZWVsZW1lbnQuYXBwZW5kQ2hpbGQoYyk7CmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250YWluZXJTaWRlYmFyJykuaW5zZXJ0QmVmb3JlKG1lc3NhZ2VlbGVtZW50LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGFpbmVyU2lkZWJhcicpLmNoaWxkTm9kZXNbMF0pOyAvL2luc2VydCBib3QgY2hhdAoKZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRhaW5lckZyZWVzcGFjZScpLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCdkaXNwbGF5OiBub25lJyk7Cgp2YXIgY3NzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsKY3NzLmlubmVySFRNTCA9ICcjYm90Q2hhdHsgYm9yZGVyLXJhZGl1czogMnB4OyBiYWNrZ3JvdW5kOiByZ2IoMjM4LCAyMzgsIDIzOCk7IHdpZHRoOmluaGVyaXQtNXB4OyBvdmVyZmxvdy13cmFwOiBicmVhay13b3JkOyBwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDowO3RvcDozcHg7bGVmdDozcHg7IGNvbG9yOiByZ2IoMjA2LCA3OSwgMTApO30nOwpkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNzcyk7Cgpkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXRDaGF0Jykuc2V0QXR0cmlidXRlKCdwbGFjZWhvbGRlcicsICdQcmVzcyBBTFQgdG8gb3BlbiBtYXRjaGluZyB3b3JkcycpOyAgLy8gaW5wdXQgd29yZGhpbnQgaW50byBjaGF0Cgpkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYm9keSIpWzBdLm9ua2V5dXAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gIkFsdCIgKXsKCQkJCQkJCWNoYXRib3QoKTsKCQkJCQkJfX07CgovL211dGF0aW9uT2JzZXJ2ZXIgPiB0cmlnZ2VyIHdvcmRDYXB0dXJlCnZhciBNdXRhdGlvbk9ic2VydmVyID0gd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luZG93LldlYktpdE11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luZG93Lk1vek11dGF0aW9uT2JzZXJ2ZXI7CnZhciBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI292ZXJsYXkgPiBkaXYgPiBkaXYudGV4dCcpOwp2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbihtdXRhdGlvbnMpIHsKICBtdXRhdGlvbnMuZm9yRWFjaChmdW5jdGlvbihtdXRhdGlvbikgewogICAgaWYgKG11dGF0aW9uLnR5cGUgPT0gJ2NoaWxkTGlzdCcpIHsKICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNvdmVybGF5ID4gZGl2ID4gZGl2LnRleHQnKS50ZXh0Q29udGVudC5zdGFydHNXaXRoKCJDaG9vc2UgYSB3b3JkIikpe3dvcmRjaG9pY2VDYXB0dXJlKCk7fTsgLy90cmlnZ2VyIHdvcmRDYXR1cHJlKCkgd2hlbiB0dXJuIGVuZHMKICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNvdmVybGF5ID4gZGl2ID4gZGl2LnRleHQnKS50ZXh0Q29udGVudC5zdGFydHNXaXRoKCJUaGUgd29yZCB3YXMiKSl7d29yZENhcHR1cmUoKTt9OwogICAgfQogIH0pOwp9KTsKb2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50LCB7CiAgY2hpbGRMaXN0OiB0cnVlCn0pOwoKLy9jYXB0dXJlIHdvcmQgZnJvbSBza3JpYmJsLmlvIGFmdGVyIHJvdW5kCmZ1bmN0aW9uIHdvcmRDYXB0dXJlKCkgewogdmFyIHdvcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjb3ZlcmxheSA+IGRpdiA+IGRpdi50ZXh0JykudGV4dENvbnRlbnQuc2xpY2UoMTQpOwogaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHdvcmRsaXN0KS5zZWFyY2goICciJyArIHdvcmQgKyAnIicpID09PSAtMSl7CiAJaWYgKHdvcmQuZW5kc1dpdGgoJ3dvcmQhJykgPT09IGZhbHNlKXsKbG9jYWxTdG9yYWdlLnNldEl0ZW0od29yZGxpc3QsbG9jYWxTdG9yYWdlLmdldEl0ZW0od29yZGxpc3QpICsgJywiJyArIHdvcmQgKyAnIicpOyAgLy91cGRhdGVzIGxvY2Fsc3RvcmFnZQp9CiB9Cn0KZnVuY3Rpb24gd29yZGNob2ljZUNhcHR1cmUoKSB7IC8vSXMgY2FsbGVkIHR3aWNlIGJ5IG11dGF0aW9uIG9ic2VydmVyCiAgdmFyIHdvcmRjaG9pY2VsaXN0ID0gW107CiAgZm9yIChpID0gMDsgaSA8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIndvcmQiKS5sZW5ndGg7IGkrKyl7CiAgICAgd29yZGNob2ljZWxpc3QucHVzaChkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJ3b3JkIilbaV0udGV4dENvbnRlbnQpOyAvL2NvbGxlY3RzIHdvcmRzIGZyb20gd29yZCBvcHRpb25zIHdoZW4gaXQncyB0aGUgcGxheWVyJ3MgdHVybiB0byBkcmF3LgogIH07IC8vIHNvbWVob3cgY3JlYXRlcyB1bmRlZmluZWQsIndvcmQxIiwid29yZDIiLCJ3b3JkMyIKICBjb25zb2xlLmxvZyh3b3JkY2hvaWNlbGlzdCkKICBmb3IgKGkgPSAwOyBpIDwgd29yZGNob2ljZWxpc3QubGVuZ3RoOyBpKyspewogICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHdvcmRsaXN0KS5zZWFyY2goICciJyArIHdvcmRjaG9pY2VsaXN0W2ldICsgJyInKSA9PT0gLTEpewogICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh3b3JkbGlzdCxsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh3b3JkbGlzdCkgKyAnLCInICsgd29yZGNob2ljZWxpc3RbaV0gKyAnIicpOwogIH0KfQp9CgpmdW5jdGlvbiBjaGF0Ym90KCl7CiAgdmFyIHdvcmRSR1ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3VycmVudFdvcmQnKS50ZXh0Q29udGVudDsKCndoaWxlICh3b3JkUkdYLmNoYXJBdCgwKSA9PT0gJ18nIHx8IHdvcmRSR1guY2hhckF0KHdvcmRSR1gubGVuZ3RoLTEpID09PSAnXycpewppZiAod29yZFJHWC5jaGFyQXQoMCkgPT09ICdfJyl7CiAgICAgIHdvcmRSR1ggPSB3b3JkUkdYLnJlcGxhY2UoJ18nLCdbXiBdJyk7CiAgICB9IGVsc2UgaWYod29yZFJHWC5jaGFyQXQod29yZFJHWC5sZW5ndGgtMSkgPT09ICdfJyl7CiAgICAgIHdvcmRSR1ggPSB3b3JkUkdYLnJlcGxhY2UoL18kLywnW14gXScpOwogICAgfQogIH0KICB3b3JkUkdYID0gd29yZFJHWC5yZXBsYWNlKC9fL2csJ1teIF0nKTsKICB3b3JkUkdYID0gJyInLmNvbmNhdCh3b3JkUkdYLCciJyk7CiAgd29yZFJHWCA9IG5ldyBSZWdFeHAod29yZFJHWCwgJ2cnKTsKCgl2YXIgd29yZGhpbnQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh3b3JkbGlzdCkubWF0Y2god29yZFJHWCkuZmlsdGVyKGZ1bmN0aW9uKGYpe3JldHVybiAhZi5pbmNsdWRlcygnLCcpO30pLnNvcnQoKS50b1N0cmluZygpLnJlcGxhY2UoLyIvZywnJykucmVwbGFjZSgvLC9nLCcsICcpOyAvLyBjbGVhbiB1cCByZXN1bHQgZm9yIGJvdCBjaGF0CgppZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JvdENoYXQnKS5hdHRyaWJ1dGVzWzBdLnZhbHVlLnNlYXJjaCgnZGlzcGxheTogbm9uZScpICE9IC0xKXsvL2lmIGhpZGRlbgpkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaGludCcpLmlubmVySFRNTCA9IHdvcmRoaW50Owpkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYm90Q2hhdCcpLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCdkaXNwbGF5OicpOwp9IGVsc2Uge2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdib3RDaGF0Jykuc2V0QXR0cmlidXRlKCdzdHlsZScsJ2Rpc3BsYXk6IG5vbmUnKTt9Cgpkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYm94TWVzc2FnZXMnKS5zY3JvbGxUb3AgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYm94TWVzc2FnZXMnKS5zY3JvbGxIZWlnaHQ7IC8vc2Nyb2xsdG8gYm90dG9tIG9mIGNoYXQKfQp9KSgpOw=="
      },
      {
         "name":"Auto base 64 decode snahp.it",
         "options":{
            "check_for_updates":false,
            "comment":null,
            "compatopts_for_requires":true,
            "compat_wrappedjsobject":false,
            "compat_metadata":false,
            "compat_foreach":false,
            "compat_prototypes":false,
            "noframes":null,
            "run_at":null,
            "override":{
               "use_includes":[
                  
               ],
               "orig_includes":[
                  
               ],
               "merge_includes":true,
               "use_matches":[
                  
               ],
               "orig_matches":[
                  "https://forum.snahp.it/*"
               ],
               "merge_matches":true,
               "use_excludes":[
                  
               ],
               "orig_excludes":[
                  
               ],
               "merge_excludes":true,
               "use_connects":[
                  
               ],
               "merge_connects":true,
               "use_blockers":[
                  
               ],
               "orig_run_at":"document-idle",
               "orig_noframes":null,
               "orig_connects":[
                  
               ]
            }
         },
         "storage":{
            "data":{
               
            },
            "ts":1605310000811
         },
         "enabled":true,
         "position":7,
         "uuid":"abd2f094-11df-42f3-89be-32221ec2296e",
         "source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBBdXRvIGJhc2UgNjQgZGVjb2RlIHNuYWhwLml0Ci8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgdHJ5IHRvIHRha2Ugb3ZlciB0aGUgd29ybGQhCi8vIEBhdXRob3IgICAgICAgU2NvdG93Ci8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9mb3J1bS5zbmFocC5pdC8qCi8vIEBncmFudCAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KCmNvbnN0IGI2NFJlZ2V4ID0gL14oPzpbQS1aYS16MC05Ky9dezR9KSooPzpbQS1aYS16MC05Ky9dezJ9PT18W0EtWmEtejAtOSsvXXszfT0pPyQvOwpmb3IgKGNvbnN0IGVsZW0gb2YgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnY29kZScpKSB7CiAgICBsZXQgY29udGVudCA9IGVsZW0udGV4dENvbnRlbnQ7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHsKICAgICAgICBjb250ZW50ID0gY29udGVudC50cmltKCk7CiAgICAgICAgaWYgKGNvbnRlbnQuc3RhcnRzV2l0aCgnaHR0cDovLycpIHx8IGNvbnRlbnQuc3RhcnRzV2l0aCgnaHR0cHM6Ly8nKSkgewogICAgICAgICAgICBlbGVtLnRleHRDb250ZW50ID0gY29udGVudDsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGlmIChjb250ZW50Lmxlbmd0aCA9PT0gMCB8fCAhYjY0UmVnZXgudGVzdChjb250ZW50KSkgewogICAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgY29udGVudCA9IGF0b2IoY29udGVudCk7CiAgICB9Cn0="
      },
      {
         "name":"Wikipedia Auto Dark Mode",
         "options":{
            "check_for_updates":true,
            "comment":null,
            "compatopts_for_requires":true,
            "compat_wrappedjsobject":false,
            "compat_metadata":false,
            "compat_foreach":false,
            "compat_arrayleft":false,
            "compat_uW_gmonkey":false,
            "compat_forvarin":false,
            "noframes":null,
            "awareOfChrome":false,
            "run_at":null,
            "override":{
               "use_includes":[
                  
               ],
               "orig_includes":[
                  "https://*wikipedia.*/*",
                  "*wikipedia.*/*"
               ],
               "merge_includes":true,
               "use_matches":[
                  
               ],
               "orig_matches":[
                  
               ],
               "merge_matches":true,
               "use_excludes":[
                  
               ],
               "orig_excludes":[
                  
               ],
               "merge_excludes":true,
               "use_connects":[
                  
               ],
               "merge_connects":true,
               "use_blockers":[
                  
               ],
               "orig_run_at":"document-start",
               "orig_noframes":null
            }
         },
         "storage":{
            "data":{
               
            },
            "ts":1605310000810
         },
         "enabled":false,
         "position":8,
         "file_url":"https://openuserjs.org/install/navchandar/Wikipedia_Auto_Dark_Mode.user.js",
         "uuid":"126aa626-04c1-4c76-a151-7dbd308d8a5b",
         "source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgICBXaWtpcGVkaWEgQXV0byBEYXJrIE1vZGUKLy8gQGRlc2NyaXB0aW9uICAgICBBdXRvLWVuYWJsZXMgRGFyayBtb2RlIG9uIFdpa2lwZWRpYSBzaXRlcwovLyBAYXV0aG9yICAgICAgICAgIG5hdmNoYW5kYXIKLy8gQGluY2x1ZGUgICAgICAgICBodHRwczovLyp3aWtpcGVkaWEuKi8qCi8vIEBpbmNsdWRlICAgICAgICAgKndpa2lwZWRpYS4qLyoKLy8gQHZlcnNpb24gICAgICAgICAxLjAKLy8gQHJ1bi1hdCAgICAgICAgICBkb2N1bWVudC1zdGFydAovLyBAY29weXJpZ2h0ICAgICAgIDIwMTgsIG5hdmNoYW5kYXIgKGh0dHBzOi8vb3BlbnVzZXJqcy5vcmcvdXNlcnMvbmF2Y2hhbmRhcikKLy8gQHVwZGF0ZVVSTCAgICAgICBodHRwczovL29wZW51c2VyanMub3JnL21ldGEvbmF2Y2hhbmRhci9XaWtpcGVkaWFfQXV0b19EYXJrX01vZGUubWV0YS5qcwovLyBAZG93bmxvYWRVUkwgICAgIGh0dHBzOi8vb3BlbnVzZXJqcy5vcmcvaW5zdGFsbC9uYXZjaGFuZGFyL1dpa2lwZWRpYV9BdXRvX0RhcmtfTW9kZS51c2VyLmpzCi8vIEBsaWNlbnNlICAgICAgICAgTUlUCi8vIEBpY29uICAgICAgICAgICAgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3N0YXRpYy9mYXZpY29uL3dpa2lwZWRpYS5pY28KLy8gQGdyYW50ICAgICAgICAgICBHTV9hZGRTdHlsZQovLyA9PS9Vc2VyU2NyaXB0PT0KCnZhciBjc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpOwpjc3MudHlwZSA9ICJ0ZXh0L2NzcyI7CmNzcy5pbm5lckhUTUwgPSAiaHRtbHtjb2xvcjojMjQyOTJlIWltcG9ydGFudH1pbnB1dCxjZW50ZXJ7YmFja2dyb3VuZDojMjQyOTJlO2JhY2tncm91bmQtaW1hZ2U6LXdlYmtpdC1saW5lYXItZ3JhZGllbnQodG9wLCMwMDAwMDAwMCxyZ2JhKDAsMCwwLC4wMikpfVwKLmhlYWRlcnt3aWR0aDoxMDAlO2JhY2tncm91bmQ6IzI0MjkyZTtoZWlnaHQ6NDZweH1uYXYsYm9keXtjb2xvcjpncmV5IWltcG9ydGFudDtiYWNrZ3JvdW5kLWNvbG9yOiMyNDI5MmUhaW1wb3J0YW50fVwKaDEsaDIsaDMsaDQsaDUsaDYsZGl2e2NvbG9yOmdyZXkhaW1wb3J0YW50O2JhY2tncm91bmQtY29sb3I6IzI0MjkyZSFpbXBvcnRhbnR9dWwsbGl7Y29sb3I6d2hpdGUhaW1wb3J0YW50O2JhY2tncm91bmQtY29sb3I6IzI0MjkyZSFpbXBvcnRhbnR9XApsaSBhe2JhY2tncm91bmQtY29sb3I6IzI0MjkyZSFpbXBvcnRhbnR9dHIsdGQsdGgsY2FwdGlvbntjb2xvcjp3aGl0ZSFpbXBvcnRhbnQ7YmFja2dyb3VuZC1jb2xvcjojMjQyOTJlIWltcG9ydGFudH1cCmEsYntjb2xvcjojN2Q5YmNkIWltcG9ydGFudDtiYWNrZ3JvdW5kLWNvbG9yOiMyNDI5MmUhaW1wb3J0YW50fWRsLGR0LGRke2NvbG9yOlNub3chaW1wb3J0YW50O2JhY2tncm91bmQtY29sb3I6IzI0MjkyZSFpbXBvcnRhbnR9XAp0ZXh0YXJlYXtjb2xvcjpTbm93IWltcG9ydGFudDtiYWNrZ3JvdW5kLWNvbG9yOiMxNzE3MTghaW1wb3J0YW50fWRpdixzcGFuLHByZXtjb2xvcjpzbm93IWltcG9ydGFudDtiYWNrZ3JvdW5kOiMyNDI5MmV9XApkZXRhaWxzLGxhYmVsLHN1bW1hcnl7YmFja2dyb3VuZDojMjQyOTJlfWltZ3tiYWNrZ3JvdW5kLWNvbG9yOmxpZ2h0Z3JleX0jZmJhcntiYWNrZ3JvdW5kOiMyMzI4MmQ7Ym9yZGVyLXRvcDoxcHggc29saWQgI2U0ZTRlNDtsaW5lLWhlaWdodDo0MHB4O21pbi13aWR0aDo5ODBweH1cCnRhYmxle2JvcmRlcjoxcHggc29saWQgIzViNWM1Yztib3JkZXItc3BhY2luZzoycHg7YmFja2dyb3VuZC1jb2xvcjojMDAwYztjb2xvcjojMDAwfVwKLm13LXVpLWlucHV0e2JhY2tncm91bmQtY29sb3I6IzFmMjUyYmRlO2NvbG9yOiMwMDA7Ym9yZGVyOjFweCBzb2xpZCAjYTJhOWIxO2JvcmRlci1yYWRpdXM6MnB4O2JveC1zaGFkb3c6aW5zZXQgMCAwIDAgLjFlbSAjM2U4MWYxO2JvcmRlcjoxcHggc29saWQgIzI1Mzc5Mztib3JkZXItcmFkaXVzOjVweH1cCi5pbmZvYm94e2JvcmRlcjoxcHggc29saWQgIzg4ODtib3JkZXItc3BhY2luZzoycHg7YmFja2dyb3VuZC1jb2xvcjojMDAwMDAwYjU7Y29sb3I6IzAwMDttYXJnaW46LjVlbSAwIC41ZW0gMWVtfVwKLm9vLXVpLXRleHRJbnB1dFdpZGdldCBpbnB1dCwub28tdWktdGV4dElucHV0V2lkZ2V0IHRleHRhcmVhe2JhY2tncm91bmQtY29sb3I6IzA3MDgwOGM3O2NvbG9yOiMwMDA7Ym9yZGVyOjFweCBzb2xpZCAjYTJhOWIxfVwKI3Atc2VhcmNoIGZvcm0sI3Atc2VhcmNoIGlucHV0e21hcmdpbjouNGVtIDAgMH0jc2ltcGxlU2VhcmNoe2JhY2tncm91bmQtY29sb3I6IzI0MjkyZX0jc2ltcGxlU2VhcmNoOmhvdmVye2JvcmRlci1jb2xvcjojNzI3NzdkfVwKI3NpbXBsZVNlYXJjaCBpbnB1dHtiYWNrZ3JvdW5kLWNvbG9yOiMyNDI5MmU7Y29sb3I6IzAwMDttYXJnaW46MDtwYWRkaW5nOjA7Ym9yZGVyOjB9XAojc2ltcGxlU2VhcmNoICNzZWFyY2hJbnB1dHt3aWR0aDoxMDAlO3BhZGRpbmc6LjJlbSAwIC4yZW0gLjJlbTtmb250LXNpemU6LjgxMjVlbTtkaXJlY3Rpb246bHRyOy13ZWJraXQtYXBwZWFyYW5jZTp0ZXh0ZmllbGR9XAojc2ltcGxlU2VhcmNoICNzZWFyY2hJbnB1dDpmb2N1c3tvdXRsaW5lOjB9I3NpbXBsZVNlYXJjaCAjc2VhcmNoSW5wdXQ6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6IzcyNzc3ZDtvcGFjaXR5OjF9XAojc2ltcGxlU2VhcmNoICNzZWFyY2hJbnB1dDotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6IzcyNzc3ZDtvcGFjaXR5OjF9I3NpbXBsZVNlYXJjaCAjc2VhcmNoSW5wdXQ6Oi1tb3otcGxhY2Vob2xkZXJ7Y29sb3I6IzcyNzc3ZDtvcGFjaXR5OjF9XAojc2ltcGxlU2VhcmNoICNzZWFyY2hJbnB1dDotbW96LXBsYWNlaG9sZGVye2NvbG9yOiM3Mjc3N2Q7b3BhY2l0eToxfSNzaW1wbGVTZWFyY2ggI3NlYXJjaElucHV0OjpwbGFjZWhvbGRlcntjb2xvcjojNzI3NzdkO29wYWNpdHk6MX1cCiNzaW1wbGVTZWFyY2ggI3NlYXJjaElucHV0Ojotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uLCNzaW1wbGVTZWFyY2ggI3NlYXJjaElucHV0Ojotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLCNzaW1wbGVTZWFyY2ggI3NlYXJjaElucHV0Ojotd2Via2l0LXNlYXJjaC1yZXN1bHRzLWJ1dHRvbiwjc2ltcGxlU2VhcmNoICNzZWFyY2hJbnB1dDo6LXdlYmtpdC1zZWFyY2gtcmVzdWx0cy1kZWNvcmF0aW9uey13ZWJraXQtYXBwZWFyYW5jZTp0ZXh0ZmllbGR9XAojc2ltcGxlU2VhcmNoICNzZWFyY2hCdXR0b24sI3NpbXBsZVNlYXJjaCAjbXctc2VhcmNoQnV0dG9ue3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO3JpZ2h0OjA7d2lkdGg6MS42NWVtO2hlaWdodDoxMDAlO2N1cnNvcjpwb2ludGVyO3RleHQtaW5kZW50Oi05OTk5OXB4O2RpcmVjdGlvbjpsdHI7d2hpdGUtc3BhY2U6bm93cmFwO292ZXJmbG93OmhpZGRlbn1cCiI7Cgp2YXIgZCA9IG5ldyBEYXRlKCk7IC8vIGZvciBub3cKdmFyIHRpbWUgPSBkLmdldEhvdXJzKCk7CmlmICh0aW1lID49IDIwIHx8IHRpbWUgPCA4KSB7CiAgLy8gUnVuIHRoaXMgb25seSBAIG5pZ2h0CiAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChjc3MpOwogIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJib2R5IilbMF0uc2V0QXR0cmlidXRlKCJiZ2NvbG9yIiwgIiMyNDI5MmUiKTsKICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYm9keSIpWzBdLnNldEF0dHJpYnV0ZSgidGV4dCIsICJTbm93Iik7CiAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImJvZHkiKVswXS5zZXRBdHRyaWJ1dGUoImFsaW5rIiwgIiM0Mjg1ZjQiKTsKICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYm9keSIpWzBdLnNldEF0dHJpYnV0ZSgibGluayIsICIjNDI4NWY0Iik7CiAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImJvZHkiKVswXS5zZXRBdHRyaWJ1dGUoInZsaW5rIiwgIlB1cnBsZSIpOwogIGRvY3VtZW50LmJvZHkuc3R5bGUuYmFja2dyb3VuZCA9ICIjMjQyOTJlIjsKfQo="
      },
      {
         "name":"twitchAdSkip",
         "options":{
            "check_for_updates":true,
            "comment":null,
            "compatopts_for_requires":true,
            "compat_wrappedjsobject":false,
            "compat_metadata":false,
            "compat_foreach":false,
            "compat_arrayleft":false,
            "compat_uW_gmonkey":false,
            "compat_forvarin":false,
            "noframes":null,
            "awareOfChrome":false,
            "run_at":null,
            "override":{
               "use_includes":[
                  
               ],
               "orig_includes":[
                  
               ],
               "merge_includes":true,
               "use_matches":[
                  
               ],
               "orig_matches":[
                  "https://www.twitch.tv/*"
               ],
               "merge_matches":true,
               "use_excludes":[
                  
               ],
               "orig_excludes":[
                  
               ],
               "merge_excludes":true,
               "use_connects":[
                  
               ],
               "merge_connects":true,
               "use_blockers":[
                  
               ],
               "orig_run_at":"document-idle",
               "orig_noframes":null,
               "orig_connects":[
                  
               ]
            }
         },
         "storage":{
            "ts":1605372870786,
            "data":{
               
            }
         },
         "enabled":false,
         "position":9,
         "file_url":"https://raw.githubusercontent.com/Wilkolicious/twitchAdSkip/main/twitchAdSkip.js",
         "uuid":"b5079258-d66f-4f26-9d17-1d334353f857",
         "source":"",
         "requires":[
            {
               "meta":{
                  "name":"underscore-min.js",
                  "url":"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.11.0/underscore-min.js",
                  "ts":1605372872977,
                  "mimetype":"text/javascript"
               },
               "source":"IWZ1bmN0aW9uKG4scil7Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYidW5kZWZpbmVkIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1yKCk6ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoInVuZGVyc2NvcmUiLHIpOihuPW58fHNlbGYsZnVuY3Rpb24oKXt2YXIgdD1uLl8sZT1uLl89cigpO2Uubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiBuLl89dCxlfX0oKSl9KHRoaXMsKGZ1bmN0aW9uKCl7Ci8vICAgICBVbmRlcnNjb3JlLmpzIDEuMTEuMAovLyAgICAgaHR0cHM6Ly91bmRlcnNjb3JlanMub3JnCi8vICAgICAoYykgMjAwOS0yMDIwIEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzCi8vICAgICBVbmRlcnNjb3JlIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLgp2YXIgbj0iMS4xMS4wIixyPSJvYmplY3QiPT10eXBlb2Ygc2VsZiYmc2VsZi5zZWxmPT09c2VsZiYmc2VsZnx8Im9iamVjdCI9PXR5cGVvZiBnbG9iYWwmJmdsb2JhbC5nbG9iYWw9PT1nbG9iYWwmJmdsb2JhbHx8RnVuY3Rpb24oInJldHVybiB0aGlzIikoKXx8e30sdD1BcnJheS5wcm90b3R5cGUsZT1PYmplY3QucHJvdG90eXBlLHU9InVuZGVmaW5lZCIhPXR5cGVvZiBTeW1ib2w/U3ltYm9sLnByb3RvdHlwZTpudWxsLGk9dC5wdXNoLG89dC5zbGljZSxhPWUudG9TdHJpbmcsZj1lLmhhc093blByb3BlcnR5LGM9InVuZGVmaW5lZCIhPXR5cGVvZiBBcnJheUJ1ZmZlcixsPUFycmF5LmlzQXJyYXkscz1PYmplY3Qua2V5cyxwPU9iamVjdC5jcmVhdGUsdj1jJiZBcnJheUJ1ZmZlci5pc1ZpZXcsaD1pc05hTix5PWlzRmluaXRlLGc9IXt0b1N0cmluZzpudWxsfS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgidG9TdHJpbmciKSxkPVsidmFsdWVPZiIsImlzUHJvdG90eXBlT2YiLCJ0b1N0cmluZyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiaGFzT3duUHJvcGVydHkiLCJ0b0xvY2FsZVN0cmluZyJdLG09TWF0aC5wb3coMiw1MyktMTtmdW5jdGlvbiBiKG4scil7cmV0dXJuIHI9bnVsbD09cj9uLmxlbmd0aC0xOityLGZ1bmN0aW9uKCl7Zm9yKHZhciB0PU1hdGgubWF4KGFyZ3VtZW50cy5sZW5ndGgtciwwKSxlPUFycmF5KHQpLHU9MDt1PHQ7dSsrKWVbdV09YXJndW1lbnRzW3Urcl07c3dpdGNoKHIpe2Nhc2UgMDpyZXR1cm4gbi5jYWxsKHRoaXMsZSk7Y2FzZSAxOnJldHVybiBuLmNhbGwodGhpcyxhcmd1bWVudHNbMF0sZSk7Y2FzZSAyOnJldHVybiBuLmNhbGwodGhpcyxhcmd1bWVudHNbMF0sYXJndW1lbnRzWzFdLGUpfXZhciBpPUFycmF5KHIrMSk7Zm9yKHU9MDt1PHI7dSsrKWlbdV09YXJndW1lbnRzW3VdO3JldHVybiBpW3JdPWUsbi5hcHBseSh0aGlzLGkpfX1mdW5jdGlvbiBfKG4pe3ZhciByPXR5cGVvZiBuO3JldHVybiJmdW5jdGlvbiI9PT1yfHwib2JqZWN0Ij09PXImJiEhbn1mdW5jdGlvbiBqKG4pe3JldHVybiEwPT09bnx8ITE9PT1ufHwiW29iamVjdCBCb29sZWFuXSI9PT1hLmNhbGwobil9ZnVuY3Rpb24gdyhuKXtyZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIGEuY2FsbChyKT09PSJbb2JqZWN0ICIrbisiXSJ9fXZhciB4PXcoIlN0cmluZyIpLEE9dygiTnVtYmVyIiksUz13KCJEYXRlIiksTz13KCJSZWdFeHAiKSxNPXcoIkVycm9yIiksRT13KCJTeW1ib2wiKSxCPXcoIk1hcCIpLE49dygiV2Vha01hcCIpLEQ9dygiU2V0IiksST13KCJXZWFrU2V0Iiksaz13KCJBcnJheUJ1ZmZlciIpLFQ9dygiRGF0YVZpZXciKSxWPWx8fHcoIkFycmF5IiksUj13KCJGdW5jdGlvbiIpLEY9ci5kb2N1bWVudCYmci5kb2N1bWVudC5jaGlsZE5vZGVzOyJmdW5jdGlvbiIhPXR5cGVvZi8uLyYmIm9iamVjdCIhPXR5cGVvZiBJbnQ4QXJyYXkmJiJmdW5jdGlvbiIhPXR5cGVvZiBGJiYoUj1mdW5jdGlvbihuKXtyZXR1cm4iZnVuY3Rpb24iPT10eXBlb2Ygbnx8ITF9KTt2YXIgVT1SO2Z1bmN0aW9uIHEobixyKXtyZXR1cm4gbnVsbCE9biYmZi5jYWxsKG4scil9dmFyIFc9dygiQXJndW1lbnRzIik7IWZ1bmN0aW9uKCl7Vyhhcmd1bWVudHMpfHwoVz1mdW5jdGlvbihuKXtyZXR1cm4gcShuLCJjYWxsZWUiKX0pfSgpO3ZhciB6PVc7ZnVuY3Rpb24gTChuKXtyZXR1cm4gQShuKSYmaChuKX1mdW5jdGlvbiBQKG4pe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBufX1mdW5jdGlvbiBDKG4pe3JldHVybiBmdW5jdGlvbihyKXt2YXIgdD1uKHIpO3JldHVybiJudW1iZXIiPT10eXBlb2YgdCYmdD49MCYmdDw9bX19ZnVuY3Rpb24gSyhuKXtyZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIG51bGw9PXI/dm9pZCAwOnJbbl19fXZhciBKPUsoImJ5dGVMZW5ndGgiKSwkPUMoSiksRz0vXFtvYmplY3QgKChJfFVpKW50KDh8MTZ8MzIpfEZsb2F0KDMyfDY0KXxVaW50OENsYW1wZWR8QmlnKEl8VWkpbnQ2NClBcnJheVxdLzt2YXIgSD1jP2Z1bmN0aW9uKG4pe3JldHVybiB2P3YobikmJiFUKG4pOiQobikmJkcudGVzdChhLmNhbGwobikpfTpQKCExKSxRPUsoImxlbmd0aCIpLFg9QyhRKTtmdW5jdGlvbiBZKG4scil7cj1mdW5jdGlvbihuKXtmb3IodmFyIHI9e30sdD1uLmxlbmd0aCxlPTA7ZTx0OysrZSlyW25bZV1dPSEwO3JldHVybntjb250YWluczpmdW5jdGlvbihuKXtyZXR1cm4gcltuXX0scHVzaDpmdW5jdGlvbih0KXtyZXR1cm4gclt0XT0hMCxuLnB1c2godCl9fX0ocik7dmFyIHQ9ZC5sZW5ndGgsdT1uLmNvbnN0cnVjdG9yLGk9VSh1KSYmdS5wcm90b3R5cGV8fGUsbz0iY29uc3RydWN0b3IiO2ZvcihxKG4sbykmJiFyLmNvbnRhaW5zKG8pJiZyLnB1c2gobyk7dC0tOykobz1kW3RdKWluIG4mJm5bb10hPT1pW29dJiYhci5jb250YWlucyhvKSYmci5wdXNoKG8pfWZ1bmN0aW9uIFoobil7aWYoIV8obikpcmV0dXJuW107aWYocylyZXR1cm4gcyhuKTt2YXIgcj1bXTtmb3IodmFyIHQgaW4gbilxKG4sdCkmJnIucHVzaCh0KTtyZXR1cm4gZyYmWShuLHIpLHJ9ZnVuY3Rpb24gbm4obixyKXt2YXIgdD1aKHIpLGU9dC5sZW5ndGg7aWYobnVsbD09bilyZXR1cm4hZTtmb3IodmFyIHU9T2JqZWN0KG4pLGk9MDtpPGU7aSsrKXt2YXIgbz10W2ldO2lmKHJbb10hPT11W29dfHwhKG8gaW4gdSkpcmV0dXJuITF9cmV0dXJuITB9ZnVuY3Rpb24gcm4obil7cmV0dXJuIG4gaW5zdGFuY2VvZiBybj9uOnRoaXMgaW5zdGFuY2VvZiBybj92b2lkKHRoaXMuX3dyYXBwZWQ9bik6bmV3IHJuKG4pfWZ1bmN0aW9uIHRuKG4scix0LGUpe2lmKG49PT1yKXJldHVybiAwIT09bnx8MS9uPT0xL3I7aWYobnVsbD09bnx8bnVsbD09cilyZXR1cm4hMTtpZihuIT1uKXJldHVybiByIT1yO3ZhciBpPXR5cGVvZiBuO3JldHVybigiZnVuY3Rpb24iPT09aXx8Im9iamVjdCI9PT1pfHwib2JqZWN0Ij09dHlwZW9mIHIpJiZmdW5jdGlvbiBuKHIsdCxlLGkpe3IgaW5zdGFuY2VvZiBybiYmKHI9ci5fd3JhcHBlZCk7dCBpbnN0YW5jZW9mIHJuJiYodD10Ll93cmFwcGVkKTt2YXIgbz1hLmNhbGwocik7aWYobyE9PWEuY2FsbCh0KSlyZXR1cm4hMTtzd2l0Y2gobyl7Y2FzZSJbb2JqZWN0IFJlZ0V4cF0iOmNhc2UiW29iamVjdCBTdHJpbmddIjpyZXR1cm4iIityPT0iIit0O2Nhc2UiW29iamVjdCBOdW1iZXJdIjpyZXR1cm4rciE9K3I/K3QhPSt0OjA9PStyPzEvK3I9PTEvdDorcj09K3Q7Y2FzZSJbb2JqZWN0IERhdGVdIjpjYXNlIltvYmplY3QgQm9vbGVhbl0iOnJldHVybityPT0rdDtjYXNlIltvYmplY3QgU3ltYm9sXSI6cmV0dXJuIHUudmFsdWVPZi5jYWxsKHIpPT09dS52YWx1ZU9mLmNhbGwodCk7Y2FzZSJbb2JqZWN0IEFycmF5QnVmZmVyXSI6cmV0dXJuIG4obmV3IERhdGFWaWV3KHIpLG5ldyBEYXRhVmlldyh0KSxlLGkpO2Nhc2UiW29iamVjdCBEYXRhVmlld10iOnZhciBmPUoocik7aWYoZiE9PUoodCkpcmV0dXJuITE7Zm9yKDtmLS07KWlmKHIuZ2V0VWludDgoZikhPT10LmdldFVpbnQ4KGYpKXJldHVybiExO3JldHVybiEwfWlmKEgocikpcmV0dXJuIG4obmV3IERhdGFWaWV3KHIuYnVmZmVyKSxuZXcgRGF0YVZpZXcodC5idWZmZXIpLGUsaSk7dmFyIGM9IltvYmplY3QgQXJyYXldIj09PW87aWYoIWMpe2lmKCJvYmplY3QiIT10eXBlb2Ygcnx8Im9iamVjdCIhPXR5cGVvZiB0KXJldHVybiExO3ZhciBsPXIuY29uc3RydWN0b3Iscz10LmNvbnN0cnVjdG9yO2lmKGwhPT1zJiYhKFUobCkmJmwgaW5zdGFuY2VvZiBsJiZVKHMpJiZzIGluc3RhbmNlb2YgcykmJiJjb25zdHJ1Y3RvciJpbiByJiYiY29uc3RydWN0b3IiaW4gdClyZXR1cm4hMX1pPWl8fFtdO3ZhciBwPShlPWV8fFtdKS5sZW5ndGg7Zm9yKDtwLS07KWlmKGVbcF09PT1yKXJldHVybiBpW3BdPT09dDtpZihlLnB1c2gociksaS5wdXNoKHQpLGMpe2lmKChwPXIubGVuZ3RoKSE9PXQubGVuZ3RoKXJldHVybiExO2Zvcig7cC0tOylpZighdG4ocltwXSx0W3BdLGUsaSkpcmV0dXJuITF9ZWxzZXt2YXIgdixoPVoocik7aWYocD1oLmxlbmd0aCxaKHQpLmxlbmd0aCE9PXApcmV0dXJuITE7Zm9yKDtwLS07KWlmKHY9aFtwXSwhcSh0LHYpfHwhdG4oclt2XSx0W3ZdLGUsaSkpcmV0dXJuITF9cmV0dXJuIGUucG9wKCksaS5wb3AoKSwhMH0obixyLHQsZSl9ZnVuY3Rpb24gZW4obil7aWYoIV8obikpcmV0dXJuW107dmFyIHI9W107Zm9yKHZhciB0IGluIG4pci5wdXNoKHQpO3JldHVybiBnJiZZKG4scikscn1mdW5jdGlvbiB1bihuKXtmb3IodmFyIHI9WihuKSx0PXIubGVuZ3RoLGU9QXJyYXkodCksdT0wO3U8dDt1KyspZVt1XT1uW3JbdV1dO3JldHVybiBlfWZ1bmN0aW9uIG9uKG4pe2Zvcih2YXIgcj17fSx0PVoobiksZT0wLHU9dC5sZW5ndGg7ZTx1O2UrKylyW25bdFtlXV1dPXRbZV07cmV0dXJuIHJ9ZnVuY3Rpb24gYW4obil7dmFyIHI9W107Zm9yKHZhciB0IGluIG4pVShuW3RdKSYmci5wdXNoKHQpO3JldHVybiByLnNvcnQoKX1mdW5jdGlvbiBmbihuLHIpe3JldHVybiBmdW5jdGlvbih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoO2lmKHImJih0PU9iamVjdCh0KSksZTwyfHxudWxsPT10KXJldHVybiB0O2Zvcih2YXIgdT0xO3U8ZTt1KyspZm9yKHZhciBpPWFyZ3VtZW50c1t1XSxvPW4oaSksYT1vLmxlbmd0aCxmPTA7ZjxhO2YrKyl7dmFyIGM9b1tmXTtyJiZ2b2lkIDAhPT10W2NdfHwodFtjXT1pW2NdKX1yZXR1cm4gdH19cm4uVkVSU0lPTj1uLHJuLnByb3RvdHlwZS52YWx1ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl93cmFwcGVkfSxybi5wcm90b3R5cGUudmFsdWVPZj1ybi5wcm90b3R5cGUudG9KU09OPXJuLnByb3RvdHlwZS52YWx1ZSxybi5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gU3RyaW5nKHRoaXMuX3dyYXBwZWQpfTt2YXIgY249Zm4oZW4pLGxuPWZuKFopLHNuPWZuKGVuLCEwKTtmdW5jdGlvbiBwbihuKXtpZighXyhuKSlyZXR1cm57fTtpZihwKXJldHVybiBwKG4pO3ZhciByPWZ1bmN0aW9uKCl7fTtyLnByb3RvdHlwZT1uO3ZhciB0PW5ldyByO3JldHVybiByLnByb3RvdHlwZT1udWxsLHR9ZnVuY3Rpb24gdm4obil7cmV0dXJuIF8obik/VihuKT9uLnNsaWNlKCk6Y24oe30sbik6bn1mdW5jdGlvbiBobihuKXtyZXR1cm4gbn1mdW5jdGlvbiB5bihuKXtyZXR1cm4gbj1sbih7fSxuKSxmdW5jdGlvbihyKXtyZXR1cm4gbm4ocixuKX19ZnVuY3Rpb24gZ24obixyKXtmb3IodmFyIHQ9ci5sZW5ndGgsZT0wO2U8dDtlKyspe2lmKG51bGw9PW4pcmV0dXJuO249bltyW2VdXX1yZXR1cm4gdD9uOnZvaWQgMH1mdW5jdGlvbiBkbihuKXtyZXR1cm4gVihuKT9mdW5jdGlvbihyKXtyZXR1cm4gZ24ocixuKX06SyhuKX1mdW5jdGlvbiBtbihuLHIsdCl7aWYodm9pZCAwPT09cilyZXR1cm4gbjtzd2l0Y2gobnVsbD09dD8zOnQpe2Nhc2UgMTpyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIG4uY2FsbChyLHQpfTtjYXNlIDM6cmV0dXJuIGZ1bmN0aW9uKHQsZSx1KXtyZXR1cm4gbi5jYWxsKHIsdCxlLHUpfTtjYXNlIDQ6cmV0dXJuIGZ1bmN0aW9uKHQsZSx1LGkpe3JldHVybiBuLmNhbGwocix0LGUsdSxpKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG4uYXBwbHkocixhcmd1bWVudHMpfX1mdW5jdGlvbiBibihuLHIsdCl7cmV0dXJuIG51bGw9PW4/aG46VShuKT9tbihuLHIsdCk6XyhuKSYmIVYobik/eW4obik6ZG4obil9ZnVuY3Rpb24gX24obixyKXtyZXR1cm4gYm4obixyLDEvMCl9ZnVuY3Rpb24gam4obixyLHQpe3JldHVybiBybi5pdGVyYXRlZSE9PV9uP3JuLml0ZXJhdGVlKG4scik6Ym4obixyLHQpfWZ1bmN0aW9uIHduKG4scil7cmV0dXJuIG51bGw9PXImJihyPW4sbj0wKSxuK01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSooci1uKzEpKX1ybi5pdGVyYXRlZT1fbjt2YXIgeG49RGF0ZS5ub3d8fGZ1bmN0aW9uKCl7cmV0dXJuKG5ldyBEYXRlKS5nZXRUaW1lKCl9O2Z1bmN0aW9uIEFuKG4pe3ZhciByPWZ1bmN0aW9uKHIpe3JldHVybiBuW3JdfSx0PSIoPzoiK1oobikuam9pbigifCIpKyIpIixlPVJlZ0V4cCh0KSx1PVJlZ0V4cCh0LCJnIik7cmV0dXJuIGZ1bmN0aW9uKG4pe3JldHVybiBuPW51bGw9PW4/IiI6IiIrbixlLnRlc3Qobik/bi5yZXBsYWNlKHUscik6bn19dmFyIFNuPXsiJiI6IiZhbXA7IiwiPCI6IiZsdDsiLCI+IjoiJmd0OyIsJyInOiImcXVvdDsiLCInIjoiJiN4Mjc7IiwiYCI6IiYjeDYwOyJ9LE9uPUFuKFNuKSxNbj1BbihvbihTbikpLEVuPXJuLnRlbXBsYXRlU2V0dGluZ3M9e2V2YWx1YXRlOi88JShbXHNcU10rPyklPi9nLGludGVycG9sYXRlOi88JT0oW1xzXFNdKz8pJT4vZyxlc2NhcGU6LzwlLShbXHNcU10rPyklPi9nfSxCbj0vKC4pXi8sTm49eyInIjoiJyIsIlxcIjoiXFwiLCJcciI6InIiLCJcbiI6Im4iLCJcdTIwMjgiOiJ1MjAyOCIsIlx1MjAyOSI6InUyMDI5In0sRG49L1xcfCd8XHJ8XG58XHUyMDI4fFx1MjAyOS9nO2Z1bmN0aW9uIEluKG4pe3JldHVybiJcXCIrTm5bbl19dmFyIGtuPTA7ZnVuY3Rpb24gVG4obixyLHQsZSx1KXtpZighKGUgaW5zdGFuY2VvZiByKSlyZXR1cm4gbi5hcHBseSh0LHUpO3ZhciBpPXBuKG4ucHJvdG90eXBlKSxvPW4uYXBwbHkoaSx1KTtyZXR1cm4gXyhvKT9vOml9dmFyIFZuPWIoKGZ1bmN0aW9uKG4scil7dmFyIHQ9Vm4ucGxhY2Vob2xkZXIsZT1mdW5jdGlvbigpe2Zvcih2YXIgdT0wLGk9ci5sZW5ndGgsbz1BcnJheShpKSxhPTA7YTxpO2ErKylvW2FdPXJbYV09PT10P2FyZ3VtZW50c1t1KytdOnJbYV07Zm9yKDt1PGFyZ3VtZW50cy5sZW5ndGg7KW8ucHVzaChhcmd1bWVudHNbdSsrXSk7cmV0dXJuIFRuKG4sZSx0aGlzLHRoaXMsbyl9O3JldHVybiBlfSkpO1ZuLnBsYWNlaG9sZGVyPXJuO3ZhciBSbj1iKChmdW5jdGlvbihuLHIsdCl7aWYoIVUobikpdGhyb3cgbmV3IFR5cGVFcnJvcigiQmluZCBtdXN0IGJlIGNhbGxlZCBvbiBhIGZ1bmN0aW9uIik7dmFyIGU9YigoZnVuY3Rpb24odSl7cmV0dXJuIFRuKG4sZSxyLHRoaXMsdC5jb25jYXQodSkpfSkpO3JldHVybiBlfSkpO2Z1bmN0aW9uIEZuKG4scix0LGUpe2lmKGU9ZXx8W10scnx8MD09PXIpe2lmKHI8PTApcmV0dXJuIGUuY29uY2F0KG4pfWVsc2Ugcj0xLzA7Zm9yKHZhciB1PWUubGVuZ3RoLGk9MCxvPVEobik7aTxvO2krKyl7dmFyIGE9bltpXTtpZihYKGEpJiYoVihhKXx8eihhKSkpaWYocj4xKUZuKGEsci0xLHQsZSksdT1lLmxlbmd0aDtlbHNlIGZvcih2YXIgZj0wLGM9YS5sZW5ndGg7ZjxjOyllW3UrK109YVtmKytdO2Vsc2UgdHx8KGVbdSsrXT1hKX1yZXR1cm4gZX12YXIgVW49YigoZnVuY3Rpb24obixyKXt2YXIgdD0ocj1GbihyLCExLCExKSkubGVuZ3RoO2lmKHQ8MSl0aHJvdyBuZXcgRXJyb3IoImJpbmRBbGwgbXVzdCBiZSBwYXNzZWQgZnVuY3Rpb24gbmFtZXMiKTtmb3IoO3QtLTspe3ZhciBlPXJbdF07bltlXT1SbihuW2VdLG4pfXJldHVybiBufSkpO3ZhciBxbj1iKChmdW5jdGlvbihuLHIsdCl7cmV0dXJuIHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7cmV0dXJuIG4uYXBwbHkobnVsbCx0KX0pLHIpfSkpLFduPVZuKHFuLHJuLDEpO2Z1bmN0aW9uIHpuKG4pe3JldHVybiBmdW5jdGlvbigpe3JldHVybiFuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19ZnVuY3Rpb24gTG4obixyKXt2YXIgdDtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4tLW4+MCYmKHQ9ci5hcHBseSh0aGlzLGFyZ3VtZW50cykpLG48PTEmJihyPW51bGwpLHR9fXZhciBQbj1WbihMbiwyKTtmdW5jdGlvbiBDbihuLHIsdCl7cj1qbihyLHQpO2Zvcih2YXIgZSx1PVoobiksaT0wLG89dS5sZW5ndGg7aTxvO2krKylpZihyKG5bZT11W2ldXSxlLG4pKXJldHVybiBlfWZ1bmN0aW9uIEtuKG4pe3JldHVybiBmdW5jdGlvbihyLHQsZSl7dD1qbih0LGUpO2Zvcih2YXIgdT1RKHIpLGk9bj4wPzA6dS0xO2k+PTAmJmk8dTtpKz1uKWlmKHQocltpXSxpLHIpKXJldHVybiBpO3JldHVybi0xfX12YXIgSm49S24oMSksJG49S24oLTEpO2Z1bmN0aW9uIEduKG4scix0LGUpe2Zvcih2YXIgdT0odD1qbih0LGUsMSkpKHIpLGk9MCxvPVEobik7aTxvOyl7dmFyIGE9TWF0aC5mbG9vcigoaStvKS8yKTt0KG5bYV0pPHU/aT1hKzE6bz1hfXJldHVybiBpfWZ1bmN0aW9uIEhuKG4scix0KXtyZXR1cm4gZnVuY3Rpb24oZSx1LGkpe3ZhciBhPTAsZj1RKGUpO2lmKCJudW1iZXIiPT10eXBlb2YgaSluPjA/YT1pPj0wP2k6TWF0aC5tYXgoaStmLGEpOmY9aT49MD9NYXRoLm1pbihpKzEsZik6aStmKzE7ZWxzZSBpZih0JiZpJiZmKXJldHVybiBlW2k9dChlLHUpXT09PXU/aTotMTtpZih1IT11KXJldHVybihpPXIoby5jYWxsKGUsYSxmKSxMKSk+PTA/aSthOi0xO2ZvcihpPW4+MD9hOmYtMTtpPj0wJiZpPGY7aSs9bilpZihlW2ldPT09dSlyZXR1cm4gaTtyZXR1cm4tMX19dmFyIFFuPUhuKDEsSm4sR24pLFhuPUhuKC0xLCRuKTtmdW5jdGlvbiBZbihuLHIsdCl7dmFyIGU9KFgobik/Sm46Q24pKG4scix0KTtpZih2b2lkIDAhPT1lJiYtMSE9PWUpcmV0dXJuIG5bZV19ZnVuY3Rpb24gWm4obixyLHQpe3ZhciBlLHU7aWYocj1tbihyLHQpLFgobikpZm9yKGU9MCx1PW4ubGVuZ3RoO2U8dTtlKyspcihuW2VdLGUsbik7ZWxzZXt2YXIgaT1aKG4pO2ZvcihlPTAsdT1pLmxlbmd0aDtlPHU7ZSsrKXIobltpW2VdXSxpW2VdLG4pfXJldHVybiBufWZ1bmN0aW9uIG5yKG4scix0KXtyPWpuKHIsdCk7Zm9yKHZhciBlPSFYKG4pJiZaKG4pLHU9KGV8fG4pLmxlbmd0aCxpPUFycmF5KHUpLG89MDtvPHU7bysrKXt2YXIgYT1lP2Vbb106bztpW29dPXIoblthXSxhLG4pfXJldHVybiBpfWZ1bmN0aW9uIHJyKG4pe3ZhciByPWZ1bmN0aW9uKHIsdCxlLHUpe3ZhciBpPSFYKHIpJiZaKHIpLG89KGl8fHIpLmxlbmd0aCxhPW4+MD8wOm8tMTtmb3IodXx8KGU9cltpP2lbYV06YV0sYSs9bik7YT49MCYmYTxvO2ErPW4pe3ZhciBmPWk/aVthXTphO2U9dChlLHJbZl0sZixyKX1yZXR1cm4gZX07cmV0dXJuIGZ1bmN0aW9uKG4sdCxlLHUpe3ZhciBpPWFyZ3VtZW50cy5sZW5ndGg+PTM7cmV0dXJuIHIobixtbih0LHUsNCksZSxpKX19dmFyIHRyPXJyKDEpLGVyPXJyKC0xKTtmdW5jdGlvbiB1cihuLHIsdCl7dmFyIGU9W107cmV0dXJuIHI9am4ocix0KSxabihuLChmdW5jdGlvbihuLHQsdSl7cihuLHQsdSkmJmUucHVzaChuKX0pKSxlfWZ1bmN0aW9uIGlyKG4scix0KXtyPWpuKHIsdCk7Zm9yKHZhciBlPSFYKG4pJiZaKG4pLHU9KGV8fG4pLmxlbmd0aCxpPTA7aTx1O2krKyl7dmFyIG89ZT9lW2ldOmk7aWYoIXIobltvXSxvLG4pKXJldHVybiExfXJldHVybiEwfWZ1bmN0aW9uIG9yKG4scix0KXtyPWpuKHIsdCk7Zm9yKHZhciBlPSFYKG4pJiZaKG4pLHU9KGV8fG4pLmxlbmd0aCxpPTA7aTx1O2krKyl7dmFyIG89ZT9lW2ldOmk7aWYocihuW29dLG8sbikpcmV0dXJuITB9cmV0dXJuITF9ZnVuY3Rpb24gYXIobixyLHQsZSl7cmV0dXJuIFgobil8fChuPXVuKG4pKSwoIm51bWJlciIhPXR5cGVvZiB0fHxlKSYmKHQ9MCksUW4obixyLHQpPj0wfXZhciBmcj1iKChmdW5jdGlvbihuLHIsdCl7dmFyIGUsdTtyZXR1cm4gVShyKT91PXI6VihyKSYmKGU9ci5zbGljZSgwLC0xKSxyPXJbci5sZW5ndGgtMV0pLG5yKG4sKGZ1bmN0aW9uKG4pe3ZhciBpPXU7aWYoIWkpe2lmKGUmJmUubGVuZ3RoJiYobj1nbihuLGUpKSxudWxsPT1uKXJldHVybjtpPW5bcl19cmV0dXJuIG51bGw9PWk/aTppLmFwcGx5KG4sdCl9KSl9KSk7ZnVuY3Rpb24gY3IobixyKXtyZXR1cm4gbnIobixkbihyKSl9ZnVuY3Rpb24gbHIobixyLHQpe3ZhciBlLHUsaT0tMS8wLG89LTEvMDtpZihudWxsPT1yfHwibnVtYmVyIj09dHlwZW9mIHImJiJvYmplY3QiIT10eXBlb2YgblswXSYmbnVsbCE9bilmb3IodmFyIGE9MCxmPShuPVgobik/bjp1bihuKSkubGVuZ3RoO2E8ZjthKyspbnVsbCE9KGU9blthXSkmJmU+aSYmKGk9ZSk7ZWxzZSByPWpuKHIsdCksWm4obiwoZnVuY3Rpb24obix0LGUpeygodT1yKG4sdCxlKSk+b3x8dT09PS0xLzAmJmk9PT0tMS8wKSYmKGk9bixvPXUpfSkpO3JldHVybiBpfWZ1bmN0aW9uIHNyKG4scix0KXtpZihudWxsPT1yfHx0KXJldHVybiBYKG4pfHwobj11bihuKSksblt3bihuLmxlbmd0aC0xKV07dmFyIGU9WChuKT92bihuKTp1bihuKSx1PVEoZSk7cj1NYXRoLm1heChNYXRoLm1pbihyLHUpLDApO2Zvcih2YXIgaT11LTEsbz0wO288cjtvKyspe3ZhciBhPXduKG8saSksZj1lW29dO2Vbb109ZVthXSxlW2FdPWZ9cmV0dXJuIGUuc2xpY2UoMCxyKX1mdW5jdGlvbiBwcihuLHIpe3JldHVybiBmdW5jdGlvbih0LGUsdSl7dmFyIGk9cj9bW10sW11dOnt9O3JldHVybiBlPWpuKGUsdSksWm4odCwoZnVuY3Rpb24ocix1KXt2YXIgbz1lKHIsdSx0KTtuKGkscixvKX0pKSxpfX12YXIgdnI9cHIoKGZ1bmN0aW9uKG4scix0KXtxKG4sdCk/blt0XS5wdXNoKHIpOm5bdF09W3JdfSkpLGhyPXByKChmdW5jdGlvbihuLHIsdCl7blt0XT1yfSkpLHlyPXByKChmdW5jdGlvbihuLHIsdCl7cShuLHQpP25bdF0rKzpuW3RdPTF9KSksZ3I9cHIoKGZ1bmN0aW9uKG4scix0KXtuW3Q/MDoxXS5wdXNoKHIpfSksITApLGRyPS9bXlx1ZDgwMC1cdWRmZmZdfFtcdWQ4MDAtXHVkYmZmXVtcdWRjMDAtXHVkZmZmXXxbXHVkODAwLVx1ZGZmZl0vZztmdW5jdGlvbiBtcihuLHIsdCl7cmV0dXJuIHIgaW4gdH12YXIgYnI9YigoZnVuY3Rpb24obixyKXt2YXIgdD17fSxlPXJbMF07aWYobnVsbD09bilyZXR1cm4gdDtVKGUpPyhyLmxlbmd0aD4xJiYoZT1tbihlLHJbMV0pKSxyPWVuKG4pKTooZT1tcixyPUZuKHIsITEsITEpLG49T2JqZWN0KG4pKTtmb3IodmFyIHU9MCxpPXIubGVuZ3RoO3U8aTt1Kyspe3ZhciBvPXJbdV0sYT1uW29dO2UoYSxvLG4pJiYodFtvXT1hKX1yZXR1cm4gdH0pKSxfcj1iKChmdW5jdGlvbihuLHIpe3ZhciB0LGU9clswXTtyZXR1cm4gVShlKT8oZT16bihlKSxyLmxlbmd0aD4xJiYodD1yWzFdKSk6KHI9bnIoRm4ociwhMSwhMSksU3RyaW5nKSxlPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIWFyKHIsdCl9KSxicihuLGUsdCl9KSk7ZnVuY3Rpb24ganIobixyLHQpe3JldHVybiBvLmNhbGwobiwwLE1hdGgubWF4KDAsbi5sZW5ndGgtKG51bGw9PXJ8fHQ/MTpyKSkpfWZ1bmN0aW9uIHdyKG4scix0KXtyZXR1cm4gbnVsbD09bnx8bi5sZW5ndGg8MT9udWxsPT1yfHx0P3ZvaWQgMDpbXTpudWxsPT1yfHx0P25bMF06anIobixuLmxlbmd0aC1yKX1mdW5jdGlvbiB4cihuLHIsdCl7cmV0dXJuIG8uY2FsbChuLG51bGw9PXJ8fHQ/MTpyKX12YXIgQXI9YigoZnVuY3Rpb24obixyKXtyZXR1cm4gcj1GbihyLCEwLCEwKSx1cihuLChmdW5jdGlvbihuKXtyZXR1cm4hYXIocixuKX0pKX0pKSxTcj1iKChmdW5jdGlvbihuLHIpe3JldHVybiBBcihuLHIpfSkpO2Z1bmN0aW9uIE9yKG4scix0LGUpe2oocil8fChlPXQsdD1yLHI9ITEpLG51bGwhPXQmJih0PWpuKHQsZSkpO2Zvcih2YXIgdT1bXSxpPVtdLG89MCxhPVEobik7bzxhO28rKyl7dmFyIGY9bltvXSxjPXQ/dChmLG8sbik6ZjtyJiYhdD8obyYmaT09PWN8fHUucHVzaChmKSxpPWMpOnQ/YXIoaSxjKXx8KGkucHVzaChjKSx1LnB1c2goZikpOmFyKHUsZil8fHUucHVzaChmKX1yZXR1cm4gdX12YXIgTXI9YigoZnVuY3Rpb24obil7cmV0dXJuIE9yKEZuKG4sITAsITApKX0pKTtmdW5jdGlvbiBFcihuKXtmb3IodmFyIHI9biYmbHIobixRKS5sZW5ndGh8fDAsdD1BcnJheShyKSxlPTA7ZTxyO2UrKyl0W2VdPWNyKG4sZSk7cmV0dXJuIHR9dmFyIEJyPWIoRXIpO2Z1bmN0aW9uIE5yKG4scil7cmV0dXJuIG4uX2NoYWluP3JuKHIpLmNoYWluKCk6cn1mdW5jdGlvbiBEcihuKXtyZXR1cm4gWm4oYW4obiksKGZ1bmN0aW9uKHIpe3ZhciB0PXJuW3JdPW5bcl07cm4ucHJvdG90eXBlW3JdPWZ1bmN0aW9uKCl7dmFyIG49W3RoaXMuX3dyYXBwZWRdO3JldHVybiBpLmFwcGx5KG4sYXJndW1lbnRzKSxOcih0aGlzLHQuYXBwbHkocm4sbikpfX0pKSxybn1abihbInBvcCIsInB1c2giLCJyZXZlcnNlIiwic2hpZnQiLCJzb3J0Iiwic3BsaWNlIiwidW5zaGlmdCJdLChmdW5jdGlvbihuKXt2YXIgcj10W25dO3JuLnByb3RvdHlwZVtuXT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX3dyYXBwZWQ7cmV0dXJuIG51bGwhPXQmJihyLmFwcGx5KHQsYXJndW1lbnRzKSwic2hpZnQiIT09biYmInNwbGljZSIhPT1ufHwwIT09dC5sZW5ndGh8fGRlbGV0ZSB0WzBdKSxOcih0aGlzLHQpfX0pKSxabihbImNvbmNhdCIsImpvaW4iLCJzbGljZSJdLChmdW5jdGlvbihuKXt2YXIgcj10W25dO3JuLnByb3RvdHlwZVtuXT1mdW5jdGlvbigpe3ZhciBuPXRoaXMuX3dyYXBwZWQ7cmV0dXJuIG51bGwhPW4mJihuPXIuYXBwbHkobixhcmd1bWVudHMpKSxOcih0aGlzLG4pfX0pKTt2YXIgSXI9RHIoe19fcHJvdG9fXzpudWxsLFZFUlNJT046bixyZXN0QXJndW1lbnRzOmIsaXNPYmplY3Q6Xyxpc051bGw6ZnVuY3Rpb24obil7cmV0dXJuIG51bGw9PT1ufSxpc1VuZGVmaW5lZDpmdW5jdGlvbihuKXtyZXR1cm4gdm9pZCAwPT09bn0saXNCb29sZWFuOmosaXNFbGVtZW50OmZ1bmN0aW9uKG4pe3JldHVybiEoIW58fDEhPT1uLm5vZGVUeXBlKX0saXNTdHJpbmc6eCxpc051bWJlcjpBLGlzRGF0ZTpTLGlzUmVnRXhwOk8saXNFcnJvcjpNLGlzU3ltYm9sOkUsaXNNYXA6Qixpc1dlYWtNYXA6Tixpc1NldDpELGlzV2Vha1NldDpJLGlzQXJyYXlCdWZmZXI6ayxpc0RhdGFWaWV3OlQsaXNBcnJheTpWLGlzRnVuY3Rpb246VSxpc0FyZ3VtZW50czp6LGlzRmluaXRlOmZ1bmN0aW9uKG4pe3JldHVybiFFKG4pJiZ5KG4pJiYhaXNOYU4ocGFyc2VGbG9hdChuKSl9LGlzTmFOOkwsaXNUeXBlZEFycmF5OkgsaXNFbXB0eTpmdW5jdGlvbihuKXtyZXR1cm4gbnVsbD09bnx8KFgobikmJihWKG4pfHx4KG4pfHx6KG4pKT8wPT09bi5sZW5ndGg6MD09PVoobikubGVuZ3RoKX0saXNNYXRjaDpubixpc0VxdWFsOmZ1bmN0aW9uKG4scil7cmV0dXJuIHRuKG4scil9LGtleXM6WixhbGxLZXlzOmVuLHZhbHVlczp1bixwYWlyczpmdW5jdGlvbihuKXtmb3IodmFyIHI9WihuKSx0PXIubGVuZ3RoLGU9QXJyYXkodCksdT0wO3U8dDt1KyspZVt1XT1bclt1XSxuW3JbdV1dXTtyZXR1cm4gZX0saW52ZXJ0Om9uLGZ1bmN0aW9uczphbixtZXRob2RzOmFuLGV4dGVuZDpjbixleHRlbmRPd246bG4sYXNzaWduOmxuLGRlZmF1bHRzOnNuLGNyZWF0ZTpmdW5jdGlvbihuLHIpe3ZhciB0PXBuKG4pO3JldHVybiByJiZsbih0LHIpLHR9LGNsb25lOnZuLHRhcDpmdW5jdGlvbihuLHIpe3JldHVybiByKG4pLG59LGhhczpmdW5jdGlvbihuLHIpe2lmKCFWKHIpKXJldHVybiBxKG4scik7Zm9yKHZhciB0PXIubGVuZ3RoLGU9MDtlPHQ7ZSsrKXt2YXIgdT1yW2VdO2lmKG51bGw9PW58fCFmLmNhbGwobix1KSlyZXR1cm4hMTtuPW5bdV19cmV0dXJuISF0fSxtYXBPYmplY3Q6ZnVuY3Rpb24obixyLHQpe3I9am4ocix0KTtmb3IodmFyIGU9WihuKSx1PWUubGVuZ3RoLGk9e30sbz0wO288dTtvKyspe3ZhciBhPWVbb107aVthXT1yKG5bYV0sYSxuKX1yZXR1cm4gaX0saWRlbnRpdHk6aG4sY29uc3RhbnQ6UCxub29wOmZ1bmN0aW9uKCl7fSxwcm9wZXJ0eTpkbixwcm9wZXJ0eU9mOmZ1bmN0aW9uKG4pe3JldHVybiBudWxsPT1uP2Z1bmN0aW9uKCl7fTpmdW5jdGlvbihyKXtyZXR1cm4gVihyKT9nbihuLHIpOm5bcl19fSxtYXRjaGVyOnluLG1hdGNoZXM6eW4sdGltZXM6ZnVuY3Rpb24obixyLHQpe3ZhciBlPUFycmF5KE1hdGgubWF4KDAsbikpO3I9bW4ocix0LDEpO2Zvcih2YXIgdT0wO3U8bjt1KyspZVt1XT1yKHUpO3JldHVybiBlfSxyYW5kb206d24sbm93OnhuLGVzY2FwZTpPbix1bmVzY2FwZTpNbix0ZW1wbGF0ZVNldHRpbmdzOkVuLHRlbXBsYXRlOmZ1bmN0aW9uKG4scix0KXshciYmdCYmKHI9dCkscj1zbih7fSxyLHJuLnRlbXBsYXRlU2V0dGluZ3MpO3ZhciBlLHU9UmVnRXhwKFsoci5lc2NhcGV8fEJuKS5zb3VyY2UsKHIuaW50ZXJwb2xhdGV8fEJuKS5zb3VyY2UsKHIuZXZhbHVhdGV8fEJuKS5zb3VyY2VdLmpvaW4oInwiKSsifCQiLCJnIiksaT0wLG89Il9fcCs9JyI7bi5yZXBsYWNlKHUsKGZ1bmN0aW9uKHIsdCxlLHUsYSl7cmV0dXJuIG8rPW4uc2xpY2UoaSxhKS5yZXBsYWNlKERuLEluKSxpPWErci5sZW5ndGgsdD9vKz0iJytcbigoX190PSgiK3QrIikpPT1udWxsPycnOl8uZXNjYXBlKF9fdCkpK1xuJyI6ZT9vKz0iJytcbigoX190PSgiK2UrIikpPT1udWxsPycnOl9fdCkrXG4nIjp1JiYobys9Iic7XG4iK3UrIlxuX19wKz0nIikscn0pKSxvKz0iJztcbiIsci52YXJpYWJsZXx8KG89IndpdGgob2JqfHx7fSl7XG4iK28rIn1cbiIpLG89InZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbiwiKyJwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9O1xuIitvKyJyZXR1cm4gX19wO1xuIjt0cnl7ZT1uZXcgRnVuY3Rpb24oci52YXJpYWJsZXx8Im9iaiIsIl8iLG8pfWNhdGNoKG4pe3Rocm93IG4uc291cmNlPW8sbn12YXIgYT1mdW5jdGlvbihuKXtyZXR1cm4gZS5jYWxsKHRoaXMsbixybil9LGY9ci52YXJpYWJsZXx8Im9iaiI7cmV0dXJuIGEuc291cmNlPSJmdW5jdGlvbigiK2YrIil7XG4iK28rIn0iLGF9LHJlc3VsdDpmdW5jdGlvbihuLHIsdCl7VihyKXx8KHI9W3JdKTt2YXIgZT1yLmxlbmd0aDtpZighZSlyZXR1cm4gVSh0KT90LmNhbGwobik6dDtmb3IodmFyIHU9MDt1PGU7dSsrKXt2YXIgaT1udWxsPT1uP3ZvaWQgMDpuW3JbdV1dO3ZvaWQgMD09PWkmJihpPXQsdT1lKSxuPVUoaSk/aS5jYWxsKG4pOml9cmV0dXJuIG59LHVuaXF1ZUlkOmZ1bmN0aW9uKG4pe3ZhciByPSsra24rIiI7cmV0dXJuIG4/bityOnJ9LGNoYWluOmZ1bmN0aW9uKG4pe3ZhciByPXJuKG4pO3JldHVybiByLl9jaGFpbj0hMCxyfSxpdGVyYXRlZTpfbixwYXJ0aWFsOlZuLGJpbmQ6Um4sYmluZEFsbDpVbixtZW1vaXplOmZ1bmN0aW9uKG4scil7dmFyIHQ9ZnVuY3Rpb24oZSl7dmFyIHU9dC5jYWNoZSxpPSIiKyhyP3IuYXBwbHkodGhpcyxhcmd1bWVudHMpOmUpO3JldHVybiBxKHUsaSl8fCh1W2ldPW4uYXBwbHkodGhpcyxhcmd1bWVudHMpKSx1W2ldfTtyZXR1cm4gdC5jYWNoZT17fSx0fSxkZWxheTpxbixkZWZlcjpXbix0aHJvdHRsZTpmdW5jdGlvbihuLHIsdCl7dmFyIGUsdSxpLG8sYT0wO3R8fCh0PXt9KTt2YXIgZj1mdW5jdGlvbigpe2E9ITE9PT10LmxlYWRpbmc/MDp4bigpLGU9bnVsbCxvPW4uYXBwbHkodSxpKSxlfHwodT1pPW51bGwpfSxjPWZ1bmN0aW9uKCl7dmFyIGM9eG4oKTthfHwhMSE9PXQubGVhZGluZ3x8KGE9Yyk7dmFyIGw9ci0oYy1hKTtyZXR1cm4gdT10aGlzLGk9YXJndW1lbnRzLGw8PTB8fGw+cj8oZSYmKGNsZWFyVGltZW91dChlKSxlPW51bGwpLGE9YyxvPW4uYXBwbHkodSxpKSxlfHwodT1pPW51bGwpKTplfHwhMT09PXQudHJhaWxpbmd8fChlPXNldFRpbWVvdXQoZixsKSksb307cmV0dXJuIGMuY2FuY2VsPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KGUpLGE9MCxlPXU9aT1udWxsfSxjfSxkZWJvdW5jZTpmdW5jdGlvbihuLHIsdCl7dmFyIGUsdSxpPWZ1bmN0aW9uKHIsdCl7ZT1udWxsLHQmJih1PW4uYXBwbHkocix0KSl9LG89YigoZnVuY3Rpb24obyl7aWYoZSYmY2xlYXJUaW1lb3V0KGUpLHQpe3ZhciBhPSFlO2U9c2V0VGltZW91dChpLHIpLGEmJih1PW4uYXBwbHkodGhpcyxvKSl9ZWxzZSBlPXFuKGkscix0aGlzLG8pO3JldHVybiB1fSkpO3JldHVybiBvLmNhbmNlbD1mdW5jdGlvbigpe2NsZWFyVGltZW91dChlKSxlPW51bGx9LG99LHdyYXA6ZnVuY3Rpb24obixyKXtyZXR1cm4gVm4ocixuKX0sbmVnYXRlOnpuLGNvbXBvc2U6ZnVuY3Rpb24oKXt2YXIgbj1hcmd1bWVudHMscj1uLmxlbmd0aC0xO3JldHVybiBmdW5jdGlvbigpe2Zvcih2YXIgdD1yLGU9bltyXS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dC0tOyllPW5bdF0uY2FsbCh0aGlzLGUpO3JldHVybiBlfX0sYWZ0ZXI6ZnVuY3Rpb24obixyKXtyZXR1cm4gZnVuY3Rpb24oKXtpZigtLW48MSlyZXR1cm4gci5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSxiZWZvcmU6TG4sb25jZTpQbixmaW5kS2V5OkNuLGZpbmRJbmRleDpKbixmaW5kTGFzdEluZGV4OiRuLHNvcnRlZEluZGV4OkduLGluZGV4T2Y6UW4sbGFzdEluZGV4T2Y6WG4sZmluZDpZbixkZXRlY3Q6WW4sZmluZFdoZXJlOmZ1bmN0aW9uKG4scil7cmV0dXJuIFluKG4seW4ocikpfSxlYWNoOlpuLGZvckVhY2g6Wm4sbWFwOm5yLGNvbGxlY3Q6bnIscmVkdWNlOnRyLGZvbGRsOnRyLGluamVjdDp0cixyZWR1Y2VSaWdodDplcixmb2xkcjplcixmaWx0ZXI6dXIsc2VsZWN0OnVyLHJlamVjdDpmdW5jdGlvbihuLHIsdCl7cmV0dXJuIHVyKG4sem4oam4ocikpLHQpfSxldmVyeTppcixhbGw6aXIsc29tZTpvcixhbnk6b3IsY29udGFpbnM6YXIsaW5jbHVkZXM6YXIsaW5jbHVkZTphcixpbnZva2U6ZnIscGx1Y2s6Y3Isd2hlcmU6ZnVuY3Rpb24obixyKXtyZXR1cm4gdXIobix5bihyKSl9LG1heDpscixtaW46ZnVuY3Rpb24obixyLHQpe3ZhciBlLHUsaT0xLzAsbz0xLzA7aWYobnVsbD09cnx8Im51bWJlciI9PXR5cGVvZiByJiYib2JqZWN0IiE9dHlwZW9mIG5bMF0mJm51bGwhPW4pZm9yKHZhciBhPTAsZj0obj1YKG4pP246dW4obikpLmxlbmd0aDthPGY7YSsrKW51bGwhPShlPW5bYV0pJiZlPGkmJihpPWUpO2Vsc2Ugcj1qbihyLHQpLFpuKG4sKGZ1bmN0aW9uKG4sdCxlKXsoKHU9cihuLHQsZSkpPG98fHU9PT0xLzAmJmk9PT0xLzApJiYoaT1uLG89dSl9KSk7cmV0dXJuIGl9LHNodWZmbGU6ZnVuY3Rpb24obil7cmV0dXJuIHNyKG4sMS8wKX0sc2FtcGxlOnNyLHNvcnRCeTpmdW5jdGlvbihuLHIsdCl7dmFyIGU9MDtyZXR1cm4gcj1qbihyLHQpLGNyKG5yKG4sKGZ1bmN0aW9uKG4sdCx1KXtyZXR1cm57dmFsdWU6bixpbmRleDplKyssY3JpdGVyaWE6cihuLHQsdSl9fSkpLnNvcnQoKGZ1bmN0aW9uKG4scil7dmFyIHQ9bi5jcml0ZXJpYSxlPXIuY3JpdGVyaWE7aWYodCE9PWUpe2lmKHQ+ZXx8dm9pZCAwPT09dClyZXR1cm4gMTtpZih0PGV8fHZvaWQgMD09PWUpcmV0dXJuLTF9cmV0dXJuIG4uaW5kZXgtci5pbmRleH0pKSwidmFsdWUiKX0sZ3JvdXBCeTp2cixpbmRleEJ5OmhyLGNvdW50Qnk6eXIscGFydGl0aW9uOmdyLHRvQXJyYXk6ZnVuY3Rpb24obil7cmV0dXJuIG4/VihuKT9vLmNhbGwobik6eChuKT9uLm1hdGNoKGRyKTpYKG4pP25yKG4saG4pOnVuKG4pOltdfSxzaXplOmZ1bmN0aW9uKG4pe3JldHVybiBudWxsPT1uPzA6WChuKT9uLmxlbmd0aDpaKG4pLmxlbmd0aH0scGljazpicixvbWl0Ol9yLGZpcnN0OndyLGhlYWQ6d3IsdGFrZTp3cixpbml0aWFsOmpyLGxhc3Q6ZnVuY3Rpb24obixyLHQpe3JldHVybiBudWxsPT1ufHxuLmxlbmd0aDwxP251bGw9PXJ8fHQ/dm9pZCAwOltdOm51bGw9PXJ8fHQ/bltuLmxlbmd0aC0xXTp4cihuLE1hdGgubWF4KDAsbi5sZW5ndGgtcikpfSxyZXN0OnhyLHRhaWw6eHIsZHJvcDp4cixjb21wYWN0OmZ1bmN0aW9uKG4pe3JldHVybiB1cihuLEJvb2xlYW4pfSxmbGF0dGVuOmZ1bmN0aW9uKG4scil7cmV0dXJuIEZuKG4sciwhMSl9LHdpdGhvdXQ6U3IsdW5pcTpPcix1bmlxdWU6T3IsdW5pb246TXIsaW50ZXJzZWN0aW9uOmZ1bmN0aW9uKG4pe2Zvcih2YXIgcj1bXSx0PWFyZ3VtZW50cy5sZW5ndGgsZT0wLHU9UShuKTtlPHU7ZSsrKXt2YXIgaT1uW2VdO2lmKCFhcihyLGkpKXt2YXIgbztmb3Iobz0xO288dCYmYXIoYXJndW1lbnRzW29dLGkpO28rKyk7bz09PXQmJnIucHVzaChpKX19cmV0dXJuIHJ9LGRpZmZlcmVuY2U6QXIsdW56aXA6RXIsdHJhbnNwb3NlOkVyLHppcDpCcixvYmplY3Q6ZnVuY3Rpb24obixyKXtmb3IodmFyIHQ9e30sZT0wLHU9UShuKTtlPHU7ZSsrKXI/dFtuW2VdXT1yW2VdOnRbbltlXVswXV09bltlXVsxXTtyZXR1cm4gdH0scmFuZ2U6ZnVuY3Rpb24obixyLHQpe251bGw9PXImJihyPW58fDAsbj0wKSx0fHwodD1yPG4/LTE6MSk7Zm9yKHZhciBlPU1hdGgubWF4KE1hdGguY2VpbCgoci1uKS90KSwwKSx1PUFycmF5KGUpLGk9MDtpPGU7aSsrLG4rPXQpdVtpXT1uO3JldHVybiB1fSxjaHVuazpmdW5jdGlvbihuLHIpe2lmKG51bGw9PXJ8fHI8MSlyZXR1cm5bXTtmb3IodmFyIHQ9W10sZT0wLHU9bi5sZW5ndGg7ZTx1Oyl0LnB1c2goby5jYWxsKG4sZSxlKz1yKSk7cmV0dXJuIHR9LG1peGluOkRyLGRlZmF1bHQ6cm59KTtyZXR1cm4gSXIuXz1JcixJcn0pKTs="
            }
         ]
      },
      {
         "name":"Twitch Adblock",
         "options":{
            "check_for_updates":true,
            "comment":null,
            "compatopts_for_requires":true,
            "compat_wrappedjsobject":false,
            "compat_metadata":false,
            "compat_foreach":false,
            "compat_arrayleft":false,
            "compat_uW_gmonkey":false,
            "compat_forvarin":false,
            "noframes":null,
            "awareOfChrome":false,
            "run_at":null,
            "override":{
               "use_includes":[
                  
               ],
               "orig_includes":[
                  "https://www.twitch.tv/*",
                  "https://cdn.embedly.com/*",
                  "https://player.twitch.tv/*"
               ],
               "merge_includes":true,
               "use_matches":[
                  
               ],
               "orig_matches":[
                  
               ],
               "merge_matches":true,
               "use_excludes":[
                  
               ],
               "orig_excludes":[
                  
               ],
               "merge_excludes":true,
               "use_connects":[
                  
               ],
               "merge_connects":true,
               "use_blockers":[
                  
               ],
               "orig_run_at":"document-end",
               "orig_noframes":null,
               "orig_connects":[
                  
               ]
            }
         },
         "storage":{
            "ts":1605817091453,
            "data":{
               
            }
         },
         "enabled":false,
         "position":10,
         "file_url":"https://greasyfork.org/scripts/416411-twitch-adblock/code/Twitch%20Adblock.user.js",
         "uuid":"46df38fd-e2ae-4675-bc5d-8019feee5825",
         "source":""
      },
      {
         "name":"2020 Reddit Dark",
         "options":{
            "check_for_updates":true,
            "comment":null,
            "compatopts_for_requires":true,
            "compat_wrappedjsobject":false,
            "compat_metadata":false,
            "compat_foreach":false,
            "compat_arrayleft":false,
            "compat_uW_gmonkey":false,
            "compat_forvarin":false,
            "noframes":null,
            "awareOfChrome":false,
            "run_at":null,
            "override":{
               "use_includes":[
                  
               ],
               "orig_includes":[
                  "https://old.reddit.com/*"
               ],
               "merge_includes":true,
               "use_matches":[
                  
               ],
               "orig_matches":[
                  
               ],
               "merge_matches":true,
               "use_excludes":[
                  
               ],
               "orig_excludes":[
                  
               ],
               "merge_excludes":true,
               "use_connects":[
                  
               ],
               "merge_connects":true,
               "use_blockers":[
                  
               ],
               "orig_run_at":"document-start",
               "orig_noframes":null,
               "orig_connects":[
                  
               ]
            }
         },
         "storage":{
            "ts":1620844584690,
            "data":{
               
            }
         },
         "enabled":true,
         "position":11,
         "uuid":"42ae038e-88ae-46a1-b339-7b38243513d5",
         "source":""
      },
      {
         "name":"COVID Refresh",
         "options":{
            "check_for_updates":true,
            "comment":null,
            "compatopts_for_requires":true,
            "compat_wrappedjsobject":false,
            "compat_metadata":false,
            "compat_foreach":false,
            "compat_arrayleft":false,
            "compat_uW_gmonkey":false,
            "compat_forvarin":false,
            "noframes":null,
            "awareOfChrome":false,
            "run_at":null,
            "override":{
               "use_includes":[
                  
               ],
               "orig_includes":[
                  
               ],
               "merge_includes":true,
               "use_matches":[
                  
               ],
               "orig_matches":[
                  "https://www.doctolib.fr/vaccination-covid-19/lille*"
               ],
               "merge_matches":true,
               "use_excludes":[
                  
               ],
               "orig_excludes":[
                  
               ],
               "merge_excludes":true,
               "use_connects":[
                  
               ],
               "merge_connects":true,
               "use_blockers":[
                  
               ],
               "orig_run_at":"document-idle",
               "orig_noframes":null,
               "orig_connects":[
                  
               ]
            }
         },
         "storage":{
            "ts":1621386287494,
            "data":{
               
            }
         },
         "enabled":false,
         "position":12,
         "uuid":"fc5edfba-64b8-47f1-95a3-1dfcc80031c4",
         "source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBDT1ZJRCBSZWZyZXNoCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgTm90aWZ5IHlvdSB3aGlsZSBhIHZhY2NpbmF0aW9uIGlzIGF2YWlsYWJsZQovLyBAYXV0aG9yICAgICAgIFNjb3RvdwovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8vd3d3LmRvY3RvbGliLmZyL3ZhY2NpbmF0aW9uLWNvdmlkLTE5L2xpbGxlKgovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24oKSB7CiAgICBjb25zdCBGQVZPUklURV9TSVRFID0gJ1plbml0aCc7CiAgICBjb25zdCBTUEVFRCA9IDE7CgogICAgZnVuY3Rpb24gYmVlcCgpIHsKICAgICAgICBjb25zdCBzbmQgPSBuZXcgQXVkaW8oImRhdGE6YXVkaW8vd2F2O2Jhc2U2NCwvL3VRUkFBQUFXTVNMd1VJWUFBc1lrWGdvUXdBRWFZTFdma1dnQUkwd1dzL0l0QUFBR0RnWXRBZ0F5TitRV2FBQWlod01XbTRHOFFRUkRpTWNDQmNIM0NjK0NEdi83eEE0VHZoOVJ6L3k4UUFEQndNV2dRQVpHL0lMTkFBUlE0R0xUY0RlSUlJaHhHT0JBdUQ3aE9mQkIzLzk0Z2NKM3crbzUvNWVJQUlBQUFWd1dnUUFWUTJPUmFJUXdFTUFKaURnOTVHNG5RTDdtUVZXSTZHd1JjZnNaQWNzS2tKdnhneEVqekZVZ2ZIb1NROVFxN0tOd3FId3VCMTNNQTRhMXEvRG1CckhnUGNtamlHb2gvL0V3QzVuR1BFbVM0UmNma1ZLT2hKZitXT2dveEpjbEZ6M2tnbi8vZEJBK3lhMUdodXJObjh6Yi8vOU5OdXROdWh6MzFmLy8vLzl2dC8vL3orSWRBRUFBQUs0TFFJQUtvYkhJdEVJWUNHQUV4QndlOGpjVG9GOXpJS3JFZERZSXVQMk1nT1dGU0UzNHdZaVI1aXFRUGowSkllb1ZkbEc0VkQ0WEE2N21BY05hMWZoekExandIdVRSeERVUS8vaVlCY3pqSGlUSmNJdVB5S2xIUWt2L0xIUVVZa3VTaTU3eVFULy91Z2dmWk5halEzVm16K1p0Ly8rbW0zV20zUTU3NnYvLy8vKzMyLy8vNS9FT2dBQUFEVmdoUUFBQUFBLy91UVpBVUFCMVdJMFBadWdBQUFBQW9Rd0FBQUVrM25SZDJxQUFBQUFDaURnQUFBQUFBQUJDcUVFUVJMQ2d3cEJHTWxKa0l6OGpLaEd2ajRrNmp6Um5xYXNOS0llb2g1Z0k3QkphQzFBMUFvTkJqSmdieUFwVlM0SURsWmdEVTVXVUF4RUtETm1tQUxIelpwMEZrejFGTVRtR0ZsMUZNRXlvZElhdmNDQVVIRFdyS0FJQTRhYTJvQ2dJTEVCdXBaZ0h2QWhFQmNaNmpvUUJ4Uzc2QWdjY3JGbGN6QnZLTEMwUUkyY0JvQ0Z2ZlREQW83ZW9PUUlucURQQnR2ckRFWkJOWU41eHdOd3hRUmZ3OFpRNXdRVkx2TzhPWVUrbUh2RkxsRGgwNU1kZzdCVDZZclJQcENCem5NQjJyLy94S0pqeXlPaCtjSW1yMi80ZG9zY3dENm5lWmp1WlI0QWdBQUJZQUFBQUJ5MXhjZFF0eFlCWVlaZGlma1VEZ3p6WGFYbjk4WjBvaTlJTFU1bUJqRkFObVJ3bFZKMy82allEQW14YWlERzMvNnhqUVFDQ0trUmIvNmtnL3dXK2tTSjUvL3JMb2JrTFNpS21xUC8waWtKdURhU2FTZi82SmlMWUxFWW5XLytrWGcxV1JWSkwvOUVtUTFZWklzdi82UXp3eTVxazcvK3RFVTBua2xzMy96SVVNUEtOWC82eVpMZitrRmdBZmdHeUxGQVV3WS8vdVFaQVVBQmNkNVVpTlBWWEFBQUFwQUFBQUFFMFZaUUt3OUlTQUFBQ2dBQUFBQVZRSXlnSUVsVnJGa0JTK0poaStFQXV1K2xLQWtZVUVJc21FQUVvTWVEbUNFVE12ZlNIVEdrRjVSV0g3a3ovRVNIV1BBcS9rY0NSaHFCdE1kb2tQZE03dmlsN1JHOThBMnNjN3pPNlp2VGRNN3BtT1VBWlRuSlcrTlh4cW1kNDFkcUo2bUxUWHhyUHBuVjhhdmFJZjVTdkw3cG5kUHZQcG5kSlI5S3V1OGZlUHZ1aXVob3JnV2pwN01mL1BSanhjRkNQRGtXMzFzcmlvQ0V4aXZ2OWxjd0tFYUhzZi83b3cyRmwxVC85UmtYZ0VoWUVsQW9DTEZ0TUFyeHdpdkRKSitiUjFIVEtKZGxFb1RFTENJcWdFd1ZHU1EraEltME5iSzhXWGNURUkwVVBvYTJOYkc0eTJLMDBKRVdiWmF2SlhrWWFxbzlDUkhTNTVGY1pUaktFazNOS29DWVVuU1Ewcld4clpiRktiS0loT0tQWmUxY0pLelpTYVFySXlVTEhEWm1WNUs0eHlTc0RSS1dPcnVhbkd0akxKWEZFbXdhSWJETFgwaElQQlVRUFZGVmtRa0RvVU5mU29EZ1FHS1Bla294ZUd6QTREVXZubjRieHpjWnJ0SnlpcEtmUE55NXcrOWxuWHdncXNpeUhOZVNWcGVtdzRiV2I5cHNZZXEvL3VRWkJvQUJRdDR5TVZ4WUFJQUFBa1FvQUFBSHZZcEw1bTZBQWdBQUNYREFBQUFENTlqYmxUaXJRZTl1cEZzbVpicE11ZHk3THoxWDFEWXN4T09TV3BmUHFOWDJXcWt0SzBETXZ1R3dsYk5qNDRUbGVMUFErR3NmYitHT1dPS0pvSXJXYjNjSU1lZU9ONmx6MnVtVHFNWFY4TWozMHlXUHBqb1NhOXVqSzhTeWVKUDV5NW1PVzFENmh2TGVwZXZlRUFFRG8wbWdDUkNsT0VnQU52M0I5YTZmaWtnVVN1L0RtQU1BVHJHeDdubmc1cDVpaW1QTlpzZlFMWUIyc0RMSWt6UktaT0hHQWFVeURjcEZCU0xHOU1DUUFMZ0FJZ1FzMll1bk9zekxTQXlRWVBWQzJZZEdHZUhEMmRUZEprMXBBSEdBV0RqbmtjTEtGeW1TM1JRWlRJbnp5U29Cd01HMFF1ZUMzZ01zQ0VZeFVxbHJjeEs2azFMUVFjc215WWVRUGRDMllmdUdQQVNDQmtjVk1RUXFwVkpzaHVpMXRrWFFKUVYwT1hHQVpNWFNPRUVCUmlyWGJWUlFXN3VncTdJTTdyUFdTWnlEbE0zSXVORWt4ekNPSjBueTJUaE5reVJhaTFiNmV2Ly8zZHpOR3pOYi8vNHVBdkhUNXNVUmNaQ0ZjdUtMaE9GczhtTEFBRUF0NFVXQUFJQUJBQUFBQUI0cWJIbzB0SWpWa1VVLy91UVpBd0FCZlNGejNacVFBQUFBQW5nd0FBQUUxSGpNcDJxQUFBQUFDWkRnQUFBRDVVa1RFMVVnWkVVRXhxWXluTjFxWnZxSU9SRUVGbUJjSlFrd2R4aUZ0dzBxRU9rR1lmUkRpZkJ1aTlNUWc0UUFIQXFXdEFXSG9DeHUxWWY0VmZXTFBJTTJtSERGc2JRRVZHd3lxUW9RY3duZkhlSWtOdDlZbmtpYVMxb2l6eWNxSnJ4NEtPUWphaFp4V2JjWmd6dGoyYzQ5bktta0lkNDRTNzFqMGM4ZVY5eURLNnVQUnp4NVgxOGVEdmp2UTZ5S285WlNTNmwvLzhlbGVQSy9MZi8vSUluck9GL0Z2RG9BRFlBR0JNR2I3RnRFcm01TVhNbG1QQUpRVmdXdGE3WngyZ28rOHhKMFVpQ2I4TEhIZGZ0V3lMSkUwUUlBSXNJK1ViWHU2N2RaTWptZ0RHQ0dsMUgrdnBGNE5TRGNrU0lrazdWZCtzeEVoQlFNUlU4ai8xMlVJUmh6U2FVZFErclFVNWtHZUZ4bStoYjFvaDZwV1dtdjN1dm1SZURsMFVudnRhcFZhSXpvMWpaYmYvcEQ2RWxMcVNYK3JVbU9RTnBKRmEvcitzYTRlL3BCbEFBQm9BQUFBQTNDVWdTaExkR0l4c1k3QVVBQlBScmdDQUJkRHVRNUdDN0RxUFFDZ2JiSlVBb1JTVWorTklFaWcwWWZ5V1VobzFWQkJCQS8vdVFaQjRBQlp4NXpmTWFrZUFBQUFtd0FBQUFGNUYzUDB3OUd0QUFBQ2ZBQUFBQXdMaE1EbUFZV01nVkVHMVUwRklHQ0JnWEJYQXRmTUgxMDAwMEVFRUVFRUNVQllsbjAzVFRUZE5CRFpvcG9wWXZyVFRkTmEzMjVtSW1OZzNUVFBWOXEzcG1ZMHhvTzZidjNyMDB5K0lER2lkLzlhYWFaVEdNdWo5bXB1OU1waW8xZFhycjVIRVJUWlNtcVUzNkEzQ3Vtek4vOVJvYnYvWHg0djlpamtTUlNOTFFoQVd1bWFwODJXUlNCVXFYU3RWL1ljUytYVkxuU1MrV0xEcm9xQXJGa01Fc0FTK2VXbXJVenJPMG9FbUU0MFJsTVo1K09ESWtBeUtBR1V3WjNtVkttY2FtY0puTVcyNk1SUGdVdzZqK0xraHlIR1ZHWWpTVVVLTnB1SlVRb09JQXlEdkV5RzhTNXlmSzZkaFpjMFR4MUtJL2d2aUtMNnF2dkZzMStiV3RhejU4dVVObnJ5cTZrdDVSek9Da1BXbFZxVlgyYS9FRUJVZFUxS3JYTGY0MEdvaWlGWEsvLy9xcG9pRFhyT2dxRFIzOEpCMGJ3N1NvTCtaQjlvMVJDa1FqUTJDQllaS2QvK1ZKeFpSUlpscVNrS2l3czBXRnhVeUN3c0tpTXk3aFVWRmhJYUNyTlFzS2tUSXNMaXZ3S0tpZ3NqOFhZbHd0L1dLaTJONGQvL3VRUkNTQUFqVVJOSUhwTVpCR1lpYVFQU1l5QUFBQkxBQUFBQUFBQUNXQUFBQUFwVUYvTWcrMGFvaFNJUm9iQkFzTWxPLy9LazRzb29zeTFKU0ZSWVdhTEM0cVpCWVdGUkdaZHdxS2l3a05CVm1vV0ZTSmtXRnhYNEZGUlFXUitMc1M0Vy9yRlJiLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vVkVGSEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFVMjkxYm1SaWIza3VaR1VBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQU1qQXdOR2gwZEhBNkx5OTNkM2N1YzI5MWJtUmliM2t1WkdVQUFBQUFBQUFBQUNVPSIpOwogICAgICAgIHNuZC5wbGF5KCk7CiAgICB9CgogICAgZnVuY3Rpb24gaXNGYXZvcml0ZVNpdGUoZWxlbSkgewogICAgICAgIHJldHVybiBlbGVtLnF1ZXJ5U2VsZWN0b3IoJy5kbC1zZWFyY2gtcmVzdWx0LW5hbWUnKS5pbm5lclRleHQuaW5jbHVkZXMoRkFWT1JJVEVfU0lURSk7CiAgICB9CgogICAgZnVuY3Rpb24gaXNGYXZvcml0ZUxvYWRlZCgpIHsKICAgICAgICBmb3IgKGxldCBlbGVtIG9mIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5kbC1zZWFyY2gtcmVzdWx0JykpIHsKICAgICAgICAgICAgaWYgKGlzRmF2b3JpdGVTaXRlKGVsZW0pICYmIGVsZW0ucXVlcnlTZWxlY3RvcignLmpzLWRsLXNlYXJjaC1yZXN1bHRzLWNhbGVuZGFyJykuY2xhc3NMaXN0LmNvbnRhaW5zKCdsb2FkZWQnKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgIGxldCBpbmRleCA9IDE7CiAgICAgICAgY29uc3Qgc2Nyb2xsID0gc2V0SW50ZXJ2YWwoKCkgPT4gewogICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgNTAwICogaW5kZXgrKyk7CiAgICAgICAgICAgIGlmIChpc0Zhdm9yaXRlTG9hZGVkKCkpIHsKICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoc2Nyb2xsKTsKICAgICAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTsKICAgICAgICAgICAgICAgIGZvciAobGV0IGVsZW0gb2YgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmRsLXNlYXJjaC1yZXN1bHQnKSkgewogICAgICAgICAgICAgICAgICAgIGlmIChpc0Zhdm9yaXRlU2l0ZShlbGVtKSkgewogICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtLmlubmVySFRNTC5pbmNsdWRlcygnQXVjdW4gcmVuZGV6LXZvdXMnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWVwKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmVkJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwgMjAwMCAqIFNQRUVEKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0sIDUwMCAqIFNQRUVEKTsKICAgIH0sIDIwMDAgKiBTUEVFRCk7Cn0pKCk7"
      },
      {
         "name":"TwitchAdSolutions (notify-strip)",
         "options":{
            "check_for_updates":true,
            "comment":null,
            "compatopts_for_requires":true,
            "compat_wrappedjsobject":false,
            "compat_metadata":false,
            "compat_foreach":false,
            "compat_arrayleft":false,
            "compat_uW_gmonkey":false,
            "compat_forvarin":false,
            "noframes":null,
            "awareOfChrome":false,
            "run_at":null,
            "override":{
               "use_includes":[
                  
               ],
               "orig_includes":[
                  
               ],
               "merge_includes":true,
               "use_matches":[
                  
               ],
               "orig_matches":[
                  "*://*.twitch.tv/*"
               ],
               "merge_matches":true,
               "use_excludes":[
                  
               ],
               "orig_excludes":[
                  
               ],
               "merge_excludes":true,
               "use_connects":[
                  
               ],
               "merge_connects":true,
               "use_blockers":[
                  
               ],
               "orig_run_at":"document-start",
               "orig_noframes":null,
               "orig_connects":[
                  
               ]
            }
         },
         "storage":{
            "ts":1623328196135,
            "data":{
               
            }
         },
         "enabled":false,
         "position":13,
         "file_url":"https://github.com/pixeltris/TwitchAdSolutions/raw/master/notify-strip/notify-strip.user.js",
         "uuid":"745964f2-94a5-4b5e-960c-eb6a30c36fd0",
         "source":""
      }
   ]
}
